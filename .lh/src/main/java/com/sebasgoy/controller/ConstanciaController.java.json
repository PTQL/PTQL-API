{
    "sourceFile": "src/main/java/com/sebasgoy/controller/ConstanciaController.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1717176597853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1717176597853,
            "name": "Commit-0",
            "content": "package com.sebasgoy.controller;\r\n\r\nimport com.sebasgoy.Parser.PlantillaParser;\r\nimport com.sebasgoy.constantes.Mensajes;\r\nimport com.sebasgoy.constantes.Plantillas;\r\nimport com.sebasgoy.dto.Modulo;\r\nimport com.sebasgoy.dto.Participante;\r\nimport com.sebasgoy.dto.UbicacionConstancias;\r\nimport com.sebasgoy.dto.response.StatusVoluntarioModulo;\r\nimport com.sebasgoy.service.ModuloService;\r\nimport com.sebasgoy.service.ParticipanteService;\r\nimport com.sebasgoy.service.UbicacionConstanciasService;\r\nimport com.sebasgoy.service.VoluntarioService;\r\nimport com.sebasgoy.util.Tools;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\n\r\nimport java.util.List;\r\nimport java.util.Objects;\r\nimport java.util.Optional;\r\n\r\n@Controller\r\n@AllArgsConstructor\r\npublic class ConstanciaController {\r\n\r\n    private final ParticipanteService participanteService;\r\n    private final ModuloService moduloService;\r\n    private final VoluntarioService voluntarioService;\r\n    private final UbicacionConstanciasService ubicacionConstanciasService;\r\n\r\n    @GetMapping(\"/generar_voluntario_constancia/{id}\")\r\n    public String generar_voluntario_constancia(@PathVariable(\"id\") Long idParticipante ,\r\n                                                HttpServletRequest request , Model model) throws Exception {\r\n        Participante participante = participanteService.findById(idParticipante);\r\n        Optional<UbicacionConstancias> ubicacionConstancias = Optional.ofNullable(participante.getActividad().getUbicacionConstancias());\r\n        if (ubicacionConstancias.isPresent() && Boolean.TRUE.equals(participante.getIsParticipant())) {\r\n            System.out.println(\"Ruta : \" + ubicacionConstancias.get().getUbicacion() + \"<--\");\r\n            Plantillas.convertirHTMLaPDF(\r\n                    Plantillas.GenerarPlantillaActividad(\r\n                            PlantillaParser.participanteToPlantillaDto(participante.getVoluntario() , participante.getActividad())\r\n                    ) , ubicacionConstancias.get().getUbicacion() + \"/\" + participante.getVoluntario().getDni() + \".pdf\");\r\n        }\r\n\r\n        return Tools.paginaAnterior(request);\r\n\r\n    }\r\n\r\n    @GetMapping(\"/generarConstanciaUnitariaModulo/{voluntarioId}\")\r\n    public String generarConstanciaUnitariaModulo(\r\n            @PathVariable Long voluntarioId ,\r\n            @RequestParam Long moduloId ,\r\n            Model model,\r\n            HttpServletRequest request){\r\n        try {\r\n            Modulo modulo = moduloService.findById(moduloId);\r\n            Optional<UbicacionConstancias> ubicacionConstancias = Optional.ofNullable(modulo.getUbicacionConstancias());\r\n            if (ubicacionConstancias.isPresent()) {\r\n                System.out.println(\"Ruta : \" + ubicacionConstancias.get().getUbicacion() + \"<--\");\r\n\r\n                List<StatusVoluntarioModulo> lstaVoluntario = voluntarioService.getVoluntarioFromModuloHoursOkAndIsParticipant(modulo);\r\n\r\n                StatusVoluntarioModulo statusVoluntario = lstaVoluntario.stream().filter(\r\n                        statusVoluntarioModulo -> Objects.equals(statusVoluntarioModulo.getVoluntario().getId(), voluntarioId)\r\n                    ).findFirst().orElseThrow();\r\n\r\n                Plantillas.convertirHTMLaPDF(\r\n                        Plantillas.GenerarPlantillaModulo(\r\n                                PlantillaParser.statusVoluntarioToPlantillaDtoModulo(statusVoluntario, modulo)\r\n                        ) , ubicacionConstancias.get().getUbicacion() + \"/\" + statusVoluntario.getVoluntario().getDni() + \".pdf\");\r\n            }\r\n\r\n            Mensajes.Success(\"Archivo\", \"Generacion\");\r\n        }catch (Exception e){\r\n            Mensajes.Error(\"Archivo\", \"Generacion\",e.toString());\r\n        }\r\n        return Tools.paginaAnterior(request);\r\n\r\n\r\n\r\n\r\n    }\r\n}"
        }
    ]
}