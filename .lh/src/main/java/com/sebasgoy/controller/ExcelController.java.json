{
    "sourceFile": "src/main/java/com/sebasgoy/controller/ExcelController.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1717176683090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717176690971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,8 @@\n \tprivate final ActividadService actividadService;\r\n \tprivate final VoluntarioService voluntarioService;\r\n \tprivate final ModuloService moduloService;\r\n \tprivate final ParticipanteService participanteService;\r\n-\tprivate final TipoParticipacionService tipoParticipacionService;\r\n \t\r\n     @PostMapping(\"/cargarExcelVoluntariostoActividad/{id}\")\r\n     public String cargarExceltoActividad(\r\n     \t\t@RequestParam(\"excelFile\") MultipartFile file,\r\n@@ -89,9 +88,9 @@\n \t\t\t} catch (Exception e) {\r\n \t\t\t    model.addAttribute(\"result\", \"Error processing the Excel file.\" + e.toString());\r\n \t\t\t    System.out.println(\"Error processing the Excel file.\" + e.toString());\r\n \t\t\t}        \t\r\n-        \t return \"redirect:/info_actividad/\".concat(idActividad.toString());\r\n+        \treturn \"redirect:/info_actividad/\".concat(idActividad.toString());\r\n \t\t}\r\n         return \"redirect:/info_actividad/\".concat(idActividad.toString());\r\n     }\r\n \r\n"
                },
                {
                    "date": 1717176698974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,180 @@\n+package com.sebasgoy.controller;\r\n+\r\n+import java.util.List;\r\n+\r\n+import com.sebasgoy.constantes.Modalidades;\r\n+import com.sebasgoy.dto.Modulo;\r\n+import com.sebasgoy.service.*;\r\n+import jakarta.persistence.EntityNotFoundException;\r\n+import jakarta.servlet.http.HttpServletRequest;\r\n+import org.springframework.stereotype.Controller;\r\n+import org.springframework.ui.Model;\r\n+import org.springframework.web.bind.annotation.PathVariable;\r\n+import org.springframework.web.bind.annotation.PostMapping;\r\n+import org.springframework.web.bind.annotation.RequestParam;\r\n+import org.springframework.web.multipart.MultipartFile;\r\n+\r\n+import com.sebasgoy.Mapper.ExcelMapper;\r\n+import com.sebasgoy.dto.Actividad;\r\n+import com.sebasgoy.dto.Participante;\r\n+import com.sebasgoy.dto.Voluntario;\r\n+import com.sebasgoy.dto.response.VoluntarioResponse;\r\n+\r\n+import lombok.AllArgsConstructor;\r\n+\r\n+import javax.sound.midi.InvalidMidiDataException;\r\n+\r\n+@Controller\r\n+@AllArgsConstructor\r\n+public class ExcelController {\r\n+\t\r\n+\t\r\n+\tprivate final ActividadService actividadService;\r\n+\tprivate final VoluntarioService voluntarioService;\r\n+\tprivate final ModuloService moduloService;\r\n+\tprivate final ParticipanteService participanteService;\r\n+\t\r\n+    @PostMapping(\"/cargarExcelVoluntariostoActividad/{id}\")\r\n+    public String cargarExceltoActividad(\r\n+    \t\t@RequestParam(\"excelFile\") MultipartFile file,\r\n+    \t\t@PathVariable(\"id\") Long idActividad,\r\n+    \t\t@RequestParam(value=\"actionType\") String action,\r\n+    \t\tModel model) {\r\n+    \t\r\n+    \t // Procesar el archivo Excel según tus necesidades\r\n+\t\tSystem.out.println(\"Solicitud de excel Mapper enviado\");\r\n+\t\tVoluntarioResponse voluntarioResponse = ExcelMapper.DevolverEntidadFromExcel(file,VoluntarioResponse.class);\r\n+\t\tSystem.out.println(\"Solicitud de excel Mapper recibido\");\r\n+\t\tif (action.equals(\"verEstado\")) {\r\n+        \ttry {\r\n+    \t\t\tmodel.addAttribute(\"voluntarioResponse\", voluntarioResponse);\r\n+    \t\t\treturn \"GestorExcel\";\r\n+            } catch (Exception e) {\r\n+                model.addAttribute(\"result\", \"Error processing the Excel file.\"+ e);\r\n+                return \"redirect:/info_actividad/\".concat(idActividad.toString());\r\n+            }        \t\r\n+\t\t}else if(action.equals(\"insertarVoluntario\")) {\r\n+\t\t\ttry {\r\n+\t\t\t    if (Boolean.TRUE.equals(participanteService.isValid(voluntarioResponse))) {\r\n+\t\t\t        Actividad actividad = actividadService.findByIdOptional(idActividad)\r\n+\t\t\t\t\t\t\t.orElseThrow(() -> new EntityNotFoundException(\"Actividad con ID \" + idActividad + \" no encontrada.\"));\r\n+\r\n+\t\t\t        for (Voluntario voluntario: voluntarioResponse.getListVoluntarioValido()) {\r\n+\t\t\t\t\t\tSystem.out.println(\"Iteracion para :\"+voluntario.toString());\r\n+\t\t\t\t\t\t// Validar duplicación con DNI\r\n+\t\t\t\t\t\tif ( !voluntarioService.validarExistencia(voluntario)) {\r\n+\t\t\t\t\t\t\tvoluntarioService.saveVoluntario(voluntario);\r\n+\t\t\t\t\t\t}else {\r\n+\t\t\t\t\t\t\tvoluntarioService.persistirVoluntario(voluntario);\r\n+\t\t\t\t\t\t}\r\n+\r\n+\t\t\t\t\t\tif (!participanteService.existeParticipanteParaVoluntarioYActividad( voluntario.getId(),actividad.getId())) {\r\n+\t\t\t\t\t\t\tParticipante participante = participanteService.crearParticipante(actividad.getId(), voluntario.getId(),Modalidades.LIBRE,true);\r\n+\t\t\t\t\t\t\tparticipanteService.saveParticipante(participante);\r\n+\t\t\t\t\t\t\tSystem.out.println(\"Registro de participante Ok :\" + participante.toString());\r\n+\t\t\t\t\t\t} else {\r\n+\t\t\t\t\t\t\tParticipante participante = participanteService.findByDniAndActividad(voluntario.getDni(),actividad);\r\n+\t\t\t\t\t\t\tparticipante.setIsParticipant(true);\r\n+\t\t\t\t\t\t\tparticipanteService.saveParticipante(participante);\r\n+\t\t\t\t\t\t\tSystem.out.println(\"Participante Existe\");\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t}\r\n+\r\n+\t\t\t\t\treturn \"redirect:/info_actividad/\" + idActividad;\r\n+\t\t\t    } else {\r\n+\t\t\t\t\tthrow new InvalidMidiDataException(\"Datos invalidos en el Excel response , revisar gestor \");\r\n+\t\t\t    }\r\n+\t\t\t} catch (Exception e) {\r\n+\t\t\t    model.addAttribute(\"result\", \"Error processing the Excel file.\" + e.toString());\r\n+\t\t\t    System.out.println(\"Error processing the Excel file.\" + e.toString());\r\n+\t\t\t}        \t\r\n+        \treturn \"redirect:/info_actividad/\".concat(idActividad.toString());\r\n+\t\t}\r\n+        return \"redirect:/info_actividad/\".concat(idActividad.toString());\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+\t@PostMapping(\"/cargarExcelVoluntariostoModulo/{id}\")\r\n+\tpublic String cargarExcelVoluntariostoModulo(\r\n+\t\t\t@PathVariable(\"id\") Long idModulo,\r\n+\t\t\t@RequestParam(\"excelFile\") MultipartFile file,\r\n+\t\t\t@RequestParam(value=\"actionType\") String action,\r\n+\t\t\tModel model,\r\n+\t\t\tHttpServletRequest request\r\n+\t) {\r\n+\t\tString pagina_anterior =request.getHeader(\"referer\");\r\n+\t\ttry {\r\n+\t\t\tSystem.out.println(\"Solicitud de excel Mapper enviado\");\r\n+\t\t\tVoluntarioResponse response = ExcelMapper.DevolverEntidadFromExcel(file,VoluntarioResponse.class);\r\n+\t\t\tSystem.out.println(\"Solicitud de excel Mapper recibido\");\r\n+\t\r\n+\t\t\tif (action.equals(\"verEstado\")) {\r\n+\t\t\t\ttry {\r\n+\t\t\t\t\tmodel.addAttribute(\"voluntarioResponse\", response);\r\n+\t\t\t\t\treturn \"GestorExcel\";\r\n+\t\t\t\t} catch (Exception e) {\r\n+\t\t\t\t\tmodel.addAttribute(\"result\", \"Error processing the Excel file.\"+ e.toString());\r\n+\t\t\t\t\treturn \"redirect:\"+pagina_anterior;\r\n+\t\t\t\t}\r\n+\t\t\t}else if(action.equals(\"insertarVoluntario\")){\r\n+\t\t\t\tif (participanteService.isValid(response)){\r\n+\t\t\t\t\tModulo modulo = moduloService.findByIdOptional(idModulo)\r\n+\t\t\t\t\t\t.orElseThrow(() -> new EntityNotFoundException(\"Modulo con ID \" + idModulo + \" no encontrada.\"));\r\n+ \t\t\t\t\tList<Voluntario> listaVoluntarios = response.getListVoluntarioValido();\r\n+\t\t\t\t\tList<Actividad> listActividad = modulo.getActividad();\r\n+\t\t\t\t\tSystem.out.println(\"Empezando registro de voluntario a modulo\");\r\n+\t\t\t\t\ttry {\r\n+\t\t\t\t\t\tvoluntario_loop:\r\n+\t\t\t\t\t\tfor ( Voluntario voluntario: listaVoluntarios) {\r\n+\t\t\t\t\t\t\tSystem.out.println(voluntario.toString());\r\n+\t\t\t\t\t\t\tif ( !voluntarioService.existsByDni(voluntario.getDni())) {\r\n+\t\t\t\t\t\t\t\tvoluntarioService.saveVoluntario(voluntario);\r\n+\t\t\t\t\t\t\t}else {\r\n+\t\t\t\t\t\t\t\tvoluntario = voluntarioService.findByDni(voluntario.getDni());\r\n+\t\t\t\t\t\t\t\tvoluntario.setEstado(true);\r\n+\t\t\t\t\t\t\t}\r\n+\r\n+\t\t\t\t\t\t\tfor(Actividad actividad :listActividad ){\r\n+\t\t\t\t\t\t\t\tif (voluntario.getParticipante().stream().anyMatch(participante -> participante.getActividad().getId().equals(actividad.getId()))) {\r\n+\t\t\t\t\t\t\t\t\tSystem.out.println(\"match\");\r\n+\t\t\t\t\t\t\t\t\tcontinue voluntario_loop;\r\n+\t\t\t\t\t\t\t\t}else {\r\n+\t\t\t\t\t\t\t\t\tif (!participanteService.existeParticipanteParaVoluntarioYActividad(voluntario.getId(),actividad.getId() )){\r\n+\t\t\t\t\t\t\t\t\t\tParticipante participante =participanteService.crearParticipante(actividad.getId(), voluntario.getId(),Modalidades.MODULO,false);\r\n+\t\t\t\t\t\t\t\t\t\tparticipanteService.saveParticipante(participante);\r\n+\t\t\t\t\t\t\t\t\t}else {\r\n+\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"Participante Existe\");\r\n+\t\t\t\t\t\t\t\t\t}\r\n+\t\t\t\t\t\t\t\t}\r\n+\r\n+\r\n+\r\n+\t\t\t\t\t\t\t}\r\n+\t\t\t\t\t\t}\r\n+\r\n+\t\t\t\t\t}catch (Exception e){\r\n+\t\t\t\t\t\tSystem.out.println(e);\r\n+\t\t\t\t\t}\r\n+\r\n+\t\t\t\t\tSystem.out.println(\"Guardado de participantes en modulo OK\");\r\n+\t\t\t\t\treturn \"redirect:\"+pagina_anterior;\r\n+\r\n+\t\t\t\t}else{\r\n+\t\t\t\t\tthrow new Exception(\"Error en el excel response - Datos Invalidos\");\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t} catch (Exception e) {\r\n+\t\t\tmodel.addAttribute(\"result\", \"Error processing the Excel file.\" + e.toString());\r\n+\t\t\tSystem.out.println(\"Error processing the Excel file.\" + e.toString());\r\n+\t\t}\r\n+\r\n+\t\treturn \"redirect:\"+pagina_anterior;\r\n+\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+}\r\n"
                }
            ],
            "date": 1717176683090,
            "name": "Commit-0",
            "content": "package com.sebasgoy.controller;\r\n\r\nimport java.util.List;\r\n\r\nimport com.sebasgoy.constantes.Modalidades;\r\nimport com.sebasgoy.dto.Modulo;\r\nimport com.sebasgoy.dto.response.AsistenciExcelResponse;\r\nimport com.sebasgoy.service.*;\r\nimport jakarta.persistence.EntityNotFoundException;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport com.sebasgoy.Mapper.ExcelMapper;\r\nimport com.sebasgoy.dto.Actividad;\r\nimport com.sebasgoy.dto.Participante;\r\nimport com.sebasgoy.dto.Voluntario;\r\nimport com.sebasgoy.dto.response.VoluntarioResponse;\r\n\r\nimport lombok.AllArgsConstructor;\r\n\r\nimport javax.sound.midi.InvalidMidiDataException;\r\n\r\n@Controller\r\n@AllArgsConstructor\r\npublic class ExcelController {\r\n\t\r\n\t\r\n\tprivate final ActividadService actividadService;\r\n\tprivate final VoluntarioService voluntarioService;\r\n\tprivate final ModuloService moduloService;\r\n\tprivate final ParticipanteService participanteService;\r\n\tprivate final TipoParticipacionService tipoParticipacionService;\r\n\t\r\n    @PostMapping(\"/cargarExcelVoluntariostoActividad/{id}\")\r\n    public String cargarExceltoActividad(\r\n    \t\t@RequestParam(\"excelFile\") MultipartFile file,\r\n    \t\t@PathVariable(\"id\") Long idActividad,\r\n    \t\t@RequestParam(value=\"actionType\") String action,\r\n    \t\tModel model) {\r\n    \t\r\n    \t // Procesar el archivo Excel según tus necesidades\r\n\t\tSystem.out.println(\"Solicitud de excel Mapper enviado\");\r\n\t\tVoluntarioResponse voluntarioResponse = ExcelMapper.DevolverEntidadFromExcel(file,VoluntarioResponse.class);\r\n\t\tSystem.out.println(\"Solicitud de excel Mapper recibido\");\r\n\t\tif (action.equals(\"verEstado\")) {\r\n        \ttry {\r\n    \t\t\tmodel.addAttribute(\"voluntarioResponse\", voluntarioResponse);\r\n    \t\t\treturn \"GestorExcel\";\r\n            } catch (Exception e) {\r\n                model.addAttribute(\"result\", \"Error processing the Excel file.\"+ e);\r\n                return \"redirect:/info_actividad/\".concat(idActividad.toString());\r\n            }        \t\r\n\t\t}else if(action.equals(\"insertarVoluntario\")) {\r\n\t\t\ttry {\r\n\t\t\t    if (Boolean.TRUE.equals(participanteService.isValid(voluntarioResponse))) {\r\n\t\t\t        Actividad actividad = actividadService.findByIdOptional(idActividad)\r\n\t\t\t\t\t\t\t.orElseThrow(() -> new EntityNotFoundException(\"Actividad con ID \" + idActividad + \" no encontrada.\"));\r\n\r\n\t\t\t        for (Voluntario voluntario: voluntarioResponse.getListVoluntarioValido()) {\r\n\t\t\t\t\t\tSystem.out.println(\"Iteracion para :\"+voluntario.toString());\r\n\t\t\t\t\t\t// Validar duplicación con DNI\r\n\t\t\t\t\t\tif ( !voluntarioService.validarExistencia(voluntario)) {\r\n\t\t\t\t\t\t\tvoluntarioService.saveVoluntario(voluntario);\r\n\t\t\t\t\t\t}else {\r\n\t\t\t\t\t\t\tvoluntarioService.persistirVoluntario(voluntario);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!participanteService.existeParticipanteParaVoluntarioYActividad( voluntario.getId(),actividad.getId())) {\r\n\t\t\t\t\t\t\tParticipante participante = participanteService.crearParticipante(actividad.getId(), voluntario.getId(),Modalidades.LIBRE,true);\r\n\t\t\t\t\t\t\tparticipanteService.saveParticipante(participante);\r\n\t\t\t\t\t\t\tSystem.out.println(\"Registro de participante Ok :\" + participante.toString());\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tParticipante participante = participanteService.findByDniAndActividad(voluntario.getDni(),actividad);\r\n\t\t\t\t\t\t\tparticipante.setIsParticipant(true);\r\n\t\t\t\t\t\t\tparticipanteService.saveParticipante(participante);\r\n\t\t\t\t\t\t\tSystem.out.println(\"Participante Existe\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn \"redirect:/info_actividad/\" + idActividad;\r\n\t\t\t    } else {\r\n\t\t\t\t\tthrow new InvalidMidiDataException(\"Datos invalidos en el Excel response , revisar gestor \");\r\n\t\t\t    }\r\n\t\t\t} catch (Exception e) {\r\n\t\t\t    model.addAttribute(\"result\", \"Error processing the Excel file.\" + e.toString());\r\n\t\t\t    System.out.println(\"Error processing the Excel file.\" + e.toString());\r\n\t\t\t}        \t\r\n        \t return \"redirect:/info_actividad/\".concat(idActividad.toString());\r\n\t\t}\r\n        return \"redirect:/info_actividad/\".concat(idActividad.toString());\r\n    }\r\n\r\n\r\n\r\n\r\n\t@PostMapping(\"/cargarExcelVoluntariostoModulo/{id}\")\r\n\tpublic String cargarExcelVoluntariostoModulo(\r\n\t\t\t@PathVariable(\"id\") Long idModulo,\r\n\t\t\t@RequestParam(\"excelFile\") MultipartFile file,\r\n\t\t\t@RequestParam(value=\"actionType\") String action,\r\n\t\t\tModel model,\r\n\t\t\tHttpServletRequest request\r\n\t) {\r\n\t\tString pagina_anterior =request.getHeader(\"referer\");\r\n\t\ttry {\r\n\t\t\tSystem.out.println(\"Solicitud de excel Mapper enviado\");\r\n\t\t\tVoluntarioResponse response = ExcelMapper.DevolverEntidadFromExcel(file,VoluntarioResponse.class);\r\n\t\t\tSystem.out.println(\"Solicitud de excel Mapper recibido\");\r\n\t\r\n\t\t\tif (action.equals(\"verEstado\")) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tmodel.addAttribute(\"voluntarioResponse\", response);\r\n\t\t\t\t\treturn \"GestorExcel\";\r\n\t\t\t\t} catch (Exception e) {\r\n\t\t\t\t\tmodel.addAttribute(\"result\", \"Error processing the Excel file.\"+ e.toString());\r\n\t\t\t\t\treturn \"redirect:\"+pagina_anterior;\r\n\t\t\t\t}\r\n\t\t\t}else if(action.equals(\"insertarVoluntario\")){\r\n\t\t\t\tif (participanteService.isValid(response)){\r\n\t\t\t\t\tModulo modulo = moduloService.findByIdOptional(idModulo)\r\n\t\t\t\t\t\t.orElseThrow(() -> new EntityNotFoundException(\"Modulo con ID \" + idModulo + \" no encontrada.\"));\r\n \t\t\t\t\tList<Voluntario> listaVoluntarios = response.getListVoluntarioValido();\r\n\t\t\t\t\tList<Actividad> listActividad = modulo.getActividad();\r\n\t\t\t\t\tSystem.out.println(\"Empezando registro de voluntario a modulo\");\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tvoluntario_loop:\r\n\t\t\t\t\t\tfor ( Voluntario voluntario: listaVoluntarios) {\r\n\t\t\t\t\t\t\tSystem.out.println(voluntario.toString());\r\n\t\t\t\t\t\t\tif ( !voluntarioService.existsByDni(voluntario.getDni())) {\r\n\t\t\t\t\t\t\t\tvoluntarioService.saveVoluntario(voluntario);\r\n\t\t\t\t\t\t\t}else {\r\n\t\t\t\t\t\t\t\tvoluntario = voluntarioService.findByDni(voluntario.getDni());\r\n\t\t\t\t\t\t\t\tvoluntario.setEstado(true);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tfor(Actividad actividad :listActividad ){\r\n\t\t\t\t\t\t\t\tif (voluntario.getParticipante().stream().anyMatch(participante -> participante.getActividad().getId().equals(actividad.getId()))) {\r\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"match\");\r\n\t\t\t\t\t\t\t\t\tcontinue voluntario_loop;\r\n\t\t\t\t\t\t\t\t}else {\r\n\t\t\t\t\t\t\t\t\tif (!participanteService.existeParticipanteParaVoluntarioYActividad(voluntario.getId(),actividad.getId() )){\r\n\t\t\t\t\t\t\t\t\t\tParticipante participante =participanteService.crearParticipante(actividad.getId(), voluntario.getId(),Modalidades.MODULO,false);\r\n\t\t\t\t\t\t\t\t\t\tparticipanteService.saveParticipante(participante);\r\n\t\t\t\t\t\t\t\t\t}else {\r\n\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"Participante Existe\");\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\r\n\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}catch (Exception e){\r\n\t\t\t\t\t\tSystem.out.println(e);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tSystem.out.println(\"Guardado de participantes en modulo OK\");\r\n\t\t\t\t\treturn \"redirect:\"+pagina_anterior;\r\n\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthrow new Exception(\"Error en el excel response - Datos Invalidos\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\tmodel.addAttribute(\"result\", \"Error processing the Excel file.\" + e.toString());\r\n\t\t\tSystem.out.println(\"Error processing the Excel file.\" + e.toString());\r\n\t\t}\r\n\r\n\t\treturn \"redirect:\"+pagina_anterior;\r\n\r\n\t}\r\n\r\n\r\n\r\n\r\n}\r\n"
        }
    ]
}