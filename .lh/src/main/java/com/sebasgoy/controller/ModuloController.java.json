{
    "sourceFile": "src/main/java/com/sebasgoy/controller/ModuloController.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1717174511008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717174569140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,336 @@\n+package com.sebasgoy.controller;\r\n+\r\n+import java.util.List;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import com.sebasgoy.Parser.PlantillaParser;\r\n+import com.sebasgoy.constantes.Modalidades;\r\n+import com.sebasgoy.constantes.Plantillas;\r\n+import com.sebasgoy.dto.Participante;\r\n+import com.sebasgoy.dto.Voluntario;\r\n+import com.sebasgoy.dto.request.PlantillaModuloDto;\r\n+import com.sebasgoy.dto.response.StatusVoluntarioModulo;\r\n+import com.sebasgoy.service.*;\r\n+import com.sebasgoy.util.Tools;\r\n+import jakarta.servlet.http.HttpServletRequest;\r\n+import lombok.AllArgsConstructor;\r\n+import org.springframework.stereotype.Controller;\r\n+import org.springframework.ui.Model;\r\n+import org.springframework.web.bind.annotation.*;\r\n+import com.sebasgoy.dto.Actividad;\r\n+import com.sebasgoy.dto.Modulo;\r\n+import com.sebasgoy.constantes.Mensajes;\r\n+ \r\n+@Controller\r\n+@AllArgsConstructor\r\n+public class ModuloController {\r\n+\r\n+\tprivate final ModuloService moduloService;\r\n+\tprivate final ActividadService actividadService;\r\n+\tprivate final VoluntarioService voluntarioService;\r\n+\tprivate final ParticipanteService participanteService;\r\n+\tprivate final UbicacionConstanciasService ubicacionConstanciasService;\r\n+\t@GetMapping(\"/dashboard_modulo\")\r\n+\tpublic String cargarDashboardModulo(Model model) {\r\n+\t\tmodel.addAttribute(\"listaModulo\", moduloService.findActivos() );\r\n+\t\treturn \"DashboardModulo\";\r\n+\t}\r\n+\t\r\n+\t@GetMapping(\"/generar_modulo\")\r\n+\tpublic String cargarCrudModulo(Model model) {\r\n+\t\ttry {\r\n+\t\t\t\r\n+\t\t\tModulo modulo = Modulo.builder().id(moduloService.UltimoId()).build();\r\n+\t\t\tmoduloService.saveModulo(modulo);\r\n+\r\n+\t\t\tmodel.addAttribute(\"listaActividades\",actividadService.findActivosSinModulo());\r\n+\t\t\tmodel.addAttribute(\"modulo\", modulo);\r\n+\t\t\tSystem.out.println(Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n+\t\t\tmodel.addAttribute(\"mensaje\",Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n+\t\t} catch (Exception e) {\r\n+\t\t\tSystem.out.println(Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()));\r\n+\r\n+\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()) );\r\n+\t\t}\r\n+\t\treturn \"FormNewModulo\";\r\n+\t}\r\n+\t\r\n+\t@GetMapping(\"/editar_modulo/{id}\")\r\n+\tpublic String cargarCrudModulo(@PathVariable(\"id\") Long id,Model model) {\r\n+\t\ttry {\r\n+\t\t\t\r\n+\t\t\tModulo modulo = moduloService.findById(id) ;\r\n+\r\n+\t\t\tmodel.addAttribute(\"listaActividades\",actividadService.findActivosSinModulo());\r\n+\t\t\tmodel.addAttribute(\"modulo\", modulo);\r\n+\t\t\tSystem.out.println( Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n+\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n+\t\t} catch (Exception e) {\r\n+\t\t\tSystem.out.println(Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()));\r\n+\r\n+\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()) );\r\n+\t\t}\r\n+\t\treturn \"FormNewModulo\";\r\n+\t}\r\n+\t\r\n+\t@GetMapping(\"/info_modulo/{id}\")\r\n+\tpublic String infoModulo(@PathVariable(\"id\") Long id,Model model) {\r\n+\t\t\r\n+\t\ttry {\r\n+\t\t\t//Logica :\r\n+\t\t\t// En el modulo todas las actividades deberian tener los mismo volutnarios\r\n+\t\t\t//pero se generan las tablas participaciones en la actividad para contabilizar su participacion\r\n+\t\t\t// segun regla de negocio , deberian tener como minimo 6 actividades o 36hrs de actividad para generar constancia\r\n+\r\n+\t\t\tList<Voluntario> listaVoluntarioModulo = voluntarioService.findVoluntarioOfModulo(id);\r\n+\r\n+\t\t\tmodel.addAttribute(\"modulo\", moduloService.findById(id));\r\n+ \t\t\tmodel.addAttribute(\"listaVoluntario\",listaVoluntarioModulo );\r\n+\r\n+\t\t\tSystem.out.println( Mensajes.success(\"MODULO\", \"BUSQUEDA\"));\r\n+\t\t\tmodel.addAttribute(\"mensaje\",  Mensajes.success(\"MODULO\", \"BUSQUEDA\"));\r\n+\t\t\t\r\n+\t\t\treturn \"InfoModulo\";\r\n+\t\t\t\r\n+\t\t} catch (Exception e) {\r\n+\t\t\tSystem.out.println(Mensajes.error(\"MODULO\", \"BUSQUEDA\").concat(e.toString()));\r\n+\r\n+\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.error(\"MODULO\", \"BUSQUEDA\").concat(e.toString()) );\r\n+\t\t}\r\n+\t\treturn \"redirect:/dashboard_modulo\";\r\n+\t}\r\n+\t@GetMapping(\"/addActividadToModulo/{actividadId}\")\r\n+\tpublic String agregarActividad(@PathVariable Long actividadId , @RequestParam Long moduloId ,Model model){\r\n+\t\t\r\n+\t\tModulo modulo = moduloService.findById(moduloId);\t\t\r\n+\t\tActividad actividad = actividadService.findById(actividadId);\r\n+\t\tList<Actividad> ListActividad = modulo.getActividad();\r\n+\r\n+\t\tif (!ListActividad.contains(actividad) ) {\r\n+\t\t\tactividad.setIdModuloActividad(moduloId);\r\n+\t\t\tList<Long> lstaVoluntariosModulo =  voluntarioService.findVoluntarioOfModulo(moduloId).stream().map(Voluntario::getId).toList();\r\n+\r\n+\t\t\tparticipanteService.saveVoluntariosToActividad(lstaVoluntariosModulo,actividadId,Modalidades.ID_MODULO,false);\r\n+\t\t\tactividadService.saveActividad(actividad);\r\n+\r\n+\t\t\tListActividad.add(actividad);\r\n+\t\t\tmodulo.setActividad(ListActividad );\r\n+\r\n+\t\t}\r\n+\t\tmodel.addAttribute(\"modulo\", modulo);\r\n+\t\tmodel.addAttribute(\"listaActividades\",actividadService.findActivosSinModulo());\r\n+\r\n+\t\treturn \"FormNewModulo\";\r\n+\t}\r\n+\t@GetMapping(\"/deleteActividadToModulo/{actividadId}\")\r\n+\tpublic String quitarActividad(@PathVariable Long actividadId , @RequestParam Long moduloId ,Model model){\r\n+\t\t\r\n+\t\tModulo modulo = moduloService.findById(moduloId);\t\t\r\n+\t\tActividad actividad = actividadService.findById(actividadId);\r\n+\r\n+\t\tList<Actividad> ListActividad = modulo.getActividad();\t\r\n+\t\tif (ListActividad.contains(actividad) ) {\r\n+\t\t\tactividad.setIdModuloActividad(null);\r\n+\t\t\tactividadService.saveActividad(actividad);\r\n+\t\t\t\r\n+\t\t\tListActividad.remove(actividad);\r\n+\t\t\tmodulo.setActividad(ListActividad );\r\n+\t\t\tmodel.addAttribute(\"modulo\", modulo);\r\n+\t\t\tmodel.addAttribute(\"listaActividades\",actividadService.findActivosSinModulo());\r\n+\r\n+\t\t}else {\r\n+\t\t\tmodel.addAttribute(\"modulo\", modulo);\r\n+\t\t\tmodel.addAttribute(\"listaActividades\",actividadService.findActivosSinModulo());\r\n+\t\t\t\r\n+\t\t}\r\n+\t\treturn \"FormNewModulo\";\r\n+\t}\r\n+\t@PostMapping(\"/guardar_modulo\")\r\n+\tpublic String guardar_modulo(@ModelAttribute Modulo modulo,Model model) {\r\n+\t\r\n+\t\ttry {\r\n+\t\t\tmoduloService.saveModulo(modulo);\r\n+\t\t\tSystem.out.println( Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n+\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n+\t\t} catch (Exception e) {\r\n+\t\t\tSystem.out.println( Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()) );\r\n+\t\t\tmodel.addAttribute(\"mensaje\",Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()) );\r\n+\t\t}\r\n+\t\treturn \"redirect:/dashboard_modulo\";\r\n+\t}\r\n+\t@GetMapping(\"/regresar_dashboard/{id}\")\r\n+\tpublic String regresar_dashboard(@PathVariable(\"id\") Long id,Model model) {\r\n+\t\r\n+\t\ttry {\r\n+\t\t\tModulo modulo = moduloService.findById(id);\t\t\r\n+\t\t\tif (\t\r\n+\t\t\t\t\tmodulo.getNombre()== null &&\r\n+\t\t\t\t\tmodulo.getActividad().size() == 0\r\n+\t\t\t\t\t) {\t\t\t\t\r\n+\t\t\t\tmoduloService.deleteModulo(modulo);\r\n+\t\t\t\tSystem.out.println(Mensajes.error(\"MODULO\", \"ELIMINACION\"));\r\n+\t\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.error(\"MODULO\", \"ELIMINACION\"));\r\n+\t\t\t}\r\n+\t\t\t\r\n+\t\t\t\r\n+\t\t\t\r\n+\t\t} catch (Exception e) {\r\n+\t\t\tSystem.out.println( Mensajes.error(\"MODULO\", \"ELIMINACION\").concat(e.toString()) );\r\n+\r\n+\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.error(\"MODULO\", \"ELIMINACION\").concat(e.toString()) );\r\n+\t\t}\r\n+\t\t\r\n+\t\treturn \"redirect:/dashboard_modulo\";\r\n+\t}\r\n+\t@GetMapping(\"/retirarActividadFromModulo/{actividadId}\")\r\n+\tpublic String retirarActividadFromModulo(@PathVariable Long actividadId , @RequestParam Long moduloId , Model model, HttpServletRequest request){\r\n+\t\tString pagina_anterior = request.getHeader(\"referer\");\r\n+\t\ttry {\r\n+\t\t\tModulo modulo = moduloService.findById(moduloId);\r\n+\t\t\tActividad actividad = actividadService.findById(actividadId);\r\n+\r\n+\r\n+\t\t\tList<Participante> lstaParticipantesFromActividad  = participanteService.findParticipantesFromActividad(actividadId);\r\n+\r\n+\r\n+\t\t\tparticipanteService.deleteListOfParticipante(lstaParticipantesFromActividad.stream().filter(participante -> participante.getIdTipoParticipacion() == Modalidades.ID_MODULO).collect(Collectors.toList()));\r\n+\r\n+\t\t\tactividad.setModulo(null);\r\n+\t\t\tactividadService.saveActividad(actividad);\r\n+\t\t\tmodulo.getActividad().remove(actividad);\r\n+\t\t\tmoduloService.saveModulo(modulo);\r\n+\r\n+\t\t} catch (Exception e) {\r\n+\t\t\tSystem.out.println(Mensajes.error(\"Actividad from Modulo\", \"ELIMINACION\").concat(e.toString()));\r\n+\t\t\tmodel.addAttribute(\"mensaje\" , Mensajes.error(\"Actividad from Modulo\" , \"ELIMINACION\").concat(e.toString()));\r\n+\r\n+\t\t}\r\n+\t\treturn \"redirect:\"+pagina_anterior;\r\n+\t}\r\n+\t@GetMapping(\"/removeVoluntarioFromModulo/{voluntarioId}\")\r\n+\tpublic String removeVoluntarioFromModulo(\r\n+\t\t\t@PathVariable Long voluntarioId ,\r\n+\t\t\t@RequestParam Long moduloId ,\r\n+\t\t\tModel model,\r\n+\t\t\tHttpServletRequest request){\r\n+\t\tSystem.out.println(\"Volutnario id :\" + voluntarioId);\r\n+\t\tSystem.out.println(\"Modulo id :\" + moduloId);\r\n+\t\tString pagina_anterior = request.getHeader(\"referer\");\r\n+\t\tModulo modulo = moduloService.findById(moduloId);\r\n+\t\tList<Actividad> listActividadFromModulo = modulo.getActividad();\r\n+\t\tSystem.out.println(\"ITERACION ACTIVIDADES DEL MODULO INICIO\");\r\n+\t\tfor (Actividad actividad: listActividadFromModulo ) {\r\n+\t\t\tParticipante participante = participanteService.findParticipantefromVoluntarioYActividad(voluntarioId,actividad.getId());\r\n+\t\t\tparticipanteService.deleteParticipante(participante);\r\n+\t\t\tSystem.out.println(\"Elminacion de actividad\");\r\n+\r\n+\t\t}\r\n+\t\tSystem.out.println(\"ITERACION ACTIVIDADES DEL MODULO FIN\");\r\n+\t\treturn \"redirect:\"+pagina_anterior;\r\n+\t}\r\n+\r\n+\r\n+\t@PostMapping(\"/generar_constancias_modulo/{id}\")\r\n+\tpublic String generar_constancias_modulo(\r\n+\t\t\t@PathVariable(\"id\") Long idModulo,\r\n+\t\t\t@RequestParam(\"pathFile\") String path,\r\n+\t\t\tHttpServletRequest request,\r\n+\t\t\tModel model) {\r\n+\t\ttry {\r\n+\t\t\tModulo modulo = moduloService.findById(idModulo);\r\n+\t\t\tpath = ubicacionConstanciasService.validarPath(path,modulo);\r\n+\t\t\tList<StatusVoluntarioModulo> lstaVoluntario = voluntarioService.getVoluntarioFromModuloHoursOkAndIsParticipant(modulo);\r\n+ \t\t\tList<PlantillaModuloDto> listPlantillaDto = PlantillaParser.listStatusVoluntarioToPlantillaDtoModulo(lstaVoluntario,modulo);\r\n+\t\t\tfor (PlantillaModuloDto plantillaDto : listPlantillaDto) {\r\n+\r\n+\t\t\t\tPlantillas.convertirHTMLaPDF(\r\n+\t\t\t\t\t\tPlantillas.GenerarPlantillaModulo(plantillaDto),\r\n+\t\t\t\t\t\tpath + \"/\" + plantillaDto.getStatusVoluntarioModulo().getVoluntario().getDni()+ \".pdf\");\r\n+\t\t\t}\r\n+\t\t\tSystem.out.println(Mensajes.success(\"Archivo\", \"Generacion\"));\r\n+\t\t}catch (Exception e) {\r\n+\t\t\tSystem.out.println(Mensajes.error(\"Archivo\", \"Generacion\").concat(e.toString()));\r\n+\t\t}\r\n+\t\treturn \"redirect:/dashboard_modulo\";\r\n+\t}\r\n+\r\n+\t@GetMapping(\"/ver_estatus_voluntarios/{id}\")\r\n+\tpublic String ver_estatus_voluntarios(\r\n+\t\t\t@PathVariable(\"id\") Long idModulo,\r\n+\t\t\tHttpServletRequest request,\r\n+\t\t\tModel model\r\n+\t){\r\n+\t\ttry {\r\n+\t\t\tModulo modulo = moduloService.findById(idModulo);\r\n+\r\n+\t\t\tSystem.out.println(\"Inicio de verificacion de horas\");\r\n+\t\t\tList<StatusVoluntarioModulo> lstResponse = voluntarioService.getVoluntarioFromModuloHoursOkAndIsParticipant(modulo);\r\n+\r\n+\t\t\tSystem.out.println(lstResponse.toString());\r\n+\t\t\tmodel.addAttribute(\"lstResponse\",lstResponse);\r\n+\t\t\tmodel.addAttribute(\"modulo\",modulo);\r\n+\r\n+\t\t\tSystem.out.println(\"Fin de verificacion de horas\");\r\n+\r\n+\t\t\treturn \"EstatusModulo\";\r\n+\t\t}catch (Exception e){\r\n+\t\t\tSystem.out.println(Mensajes.error(\"Status\", \"Generacion\").concat(e.toString()));\r\n+\t\t\treturn Tools.paginaAnterior(request);\r\n+\r\n+\t\t}\r\n+\r\n+\t}\r\n+\r\n+\t@GetMapping(\"/convertir_modulo/{id}\")\r\n+\tpublic String convertir_modulo(\r\n+\t\t\tHttpServletRequest  request,\r\n+\t\t\t@PathVariable(\"id\") Long idParticipante,\r\n+\t\t\tModel model){\r\n+\t\ttry {\r\n+\t\t\tParticipante participante = participanteService.findById(idParticipante);\r\n+\t\t\tLong idModulo = participante.getActividad().getIdModuloActividad();\r\n+\t\t\tModulo modulo = moduloService.findById(idModulo);\r\n+\t\t\tif ( modulo != null ){\r\n+\t\t\t\t//Aca estan las actividades que participo de manera \"libre\"\r\n+\t\t\t\tList<Participante> lstActividadesParticipadas = participanteService.obtenerParticipacionAsociadasByModuloId(participante.getIdVoluntario(),idModulo);\r\n+\r\n+\t\t\t\t//Se busca primero cambiar el tipo de participacion a modulo\r\n+\t\t\t\tfor (Participante p :\r\n+\t\t\t\t\tlstActividadesParticipadas) {\r\n+\t\t\t\t\tp.setIdTipoParticipacion(Modalidades.ID_MODULO);\r\n+\t\t\t\t\tparticipanteService.saveParticipante(p);\r\n+\t\t\t\t}\r\n+\r\n+\t\t\t\tList<Actividad> lstActividadesFaltantes =\r\n+\t\t\t\t\tactividadService.recuperarFaltantes(\r\n+\t\t\t\t\t\tactividadService.obtenerActividesFromParticipaciones(\r\n+\t\t\t\t\t\t\tlstActividadesParticipadas),\r\n+\t\t\t\t\t\tmodulo.getActividad());\r\n+\r\n+\t\t\t\tfor (Actividad actividad:\r\n+\t\t\t\t\tlstActividadesFaltantes) {\r\n+\r\n+\t\t\t\t\tparticipanteService.saveParticipante(\r\n+\t\t\t\t\t\t\tParticipante.builder()\r\n+\t\t\t\t\t\t\t\t\t.isParticipant(Boolean.FALSE)\r\n+\t\t\t\t\t\t\t\t\t.idActividad(actividad.getId())\r\n+\t\t\t\t\t\t\t\t\t.idVoluntario(participante.getIdVoluntario())\r\n+\t\t\t\t\t\t\t\t\t.idTipoParticipacion(Modalidades.ID_MODULO)\r\n+\t\t\t\t\t\t\t\t\t.build()\r\n+\t\t\t\t\t);\r\n+\r\n+\t\t\t\t}\r\n+\t\t\t\tSystem.out.println(\"Se asocio el voluntario al modulo :\"+ modulo.toString());\r\n+\t\t\t}else {\r\n+\t\t\t\tSystem.out.println(\"La actividad no esta asociada a un modulo\");\r\n+\t\t\t}\r\n+\t\t\treturn Tools.paginaAnterior(request);\r\n+\t\t}catch (Exception e){\r\n+\t\t\tSystem.out.println(Mensajes.error(\"Error al convertir tipo de participacion a modulo\").concat(e.toString()));\r\n+\t\t\treturn Tools.paginaAnterior(request);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\r\n+\r\n+}\r\n"
                },
                {
                    "date": 1717174575159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -330,7 +330,55 @@\n \t\t\treturn Tools.paginaAnterior(request);\r\n \t\t}\r\n \t}\r\n \r\n+\t@GetMapping(\"/convertir_modulo/{id}\")\r\n+\tpublic String convertir_modulo(\r\n+\t\t\tHttpServletRequest  request,\r\n+\t\t\t@PathVariable(\"id\") Long idParticipante,\r\n+\t\t\tModel model){\r\n+\t\ttry {\r\n+\t\t\tParticipante participante = participanteService.findById(idParticipante);\r\n+\t\t\tLong idModulo = participante.getActividad().getIdModuloActividad();\r\n+\t\t\tModulo modulo = moduloService.findById(idModulo);\r\n+\t\t\tif ( modulo != null ){\r\n+\t\t\t\t//Aca estan las actividades que participo de manera \"libre\"\r\n+\t\t\t\tList<Participante> lstActividadesParticipadas = participanteService.obtenerParticipacionAsociadasByModuloId(participante.getIdVoluntario(),idModulo);\r\n \r\n+\t\t\t\t//Se busca primero cambiar el tipo de participacion a modulo\r\n+\t\t\t\tfor (Participante p :\r\n+\t\t\t\t\tlstActividadesParticipadas) {\r\n+\t\t\t\t\tp.setIdTipoParticipacion(Modalidades.ID_MODULO);\r\n+\t\t\t\t\tparticipanteService.saveParticipante(p);\r\n+\t\t\t\t}\r\n \r\n+\t\t\t\tList<Actividad> lstActividadesFaltantes =\r\n+\t\t\t\t\tactividadService.recuperarFaltantes(\r\n+\t\t\t\t\t\tactividadService.obtenerActividesFromParticipaciones(\r\n+\t\t\t\t\t\t\tlstActividadesParticipadas),\r\n+\t\t\t\t\t\tmodulo.getActividad());\r\n+\r\n+\t\t\t\tfor (Actividad actividad:\r\n+\t\t\t\t\tlstActividadesFaltantes) {\r\n+\r\n+\t\t\t\t\tparticipanteService.saveParticipante(\r\n+\t\t\t\t\t\t\tParticipante.builder()\r\n+\t\t\t\t\t\t\t\t\t.isParticipant(Boolean.FALSE)\r\n+\t\t\t\t\t\t\t\t\t.idActividad(actividad.getId())\r\n+\t\t\t\t\t\t\t\t\t.idVoluntario(participante.getIdVoluntario())\r\n+\t\t\t\t\t\t\t\t\t.idTipoParticipacion(Modalidades.ID_MODULO)\r\n+\t\t\t\t\t\t\t\t\t.build()\r\n+\t\t\t\t\t);\r\n+\r\n+\t\t\t\t}\r\n+\t\t\t\tSystem.out.println(\"Se asocio el voluntario al modulo :\"+ modulo.toString());\r\n+\t\t\t}else {\r\n+\t\t\t\tSystem.out.println(\"La actividad no esta asociada a un modulo\");\r\n+\t\t\t}\r\n+\t\t\treturn Tools.paginaAnterior(request);\r\n+\t\t}catch (Exception e){\r\n+\t\t\tSystem.out.println(Mensajes.error(\"Error al convertir tipo de participacion a modulo\").concat(e.toString()));\r\n+\t\t\treturn Tools.paginaAnterior(request);\r\n+\t\t}\r\n+\t}\r\n+\r\n }\r\n"
                },
                {
                    "date": 1717174580643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,384 @@\n+package com.sebasgoy.controller;\r\n+\r\n+import java.util.List;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import com.sebasgoy.Parser.PlantillaParser;\r\n+import com.sebasgoy.constantes.Modalidades;\r\n+import com.sebasgoy.constantes.Plantillas;\r\n+import com.sebasgoy.dto.Participante;\r\n+import com.sebasgoy.dto.Voluntario;\r\n+import com.sebasgoy.dto.request.PlantillaModuloDto;\r\n+import com.sebasgoy.dto.response.StatusVoluntarioModulo;\r\n+import com.sebasgoy.service.*;\r\n+import com.sebasgoy.util.Tools;\r\n+import jakarta.servlet.http.HttpServletRequest;\r\n+import lombok.AllArgsConstructor;\r\n+import org.springframework.stereotype.Controller;\r\n+import org.springframework.ui.Model;\r\n+import org.springframework.web.bind.annotation.*;\r\n+import com.sebasgoy.dto.Actividad;\r\n+import com.sebasgoy.dto.Modulo;\r\n+import com.sebasgoy.constantes.Mensajes;\r\n+ \r\n+@Controller\r\n+@AllArgsConstructor\r\n+public class ModuloController {\r\n+\r\n+\tprivate final ModuloService moduloService;\r\n+\tprivate final ActividadService actividadService;\r\n+\tprivate final VoluntarioService voluntarioService;\r\n+\tprivate final ParticipanteService participanteService;\r\n+\tprivate final UbicacionConstanciasService ubicacionConstanciasService;\r\n+\t@GetMapping(\"/dashboard_modulo\")\r\n+\tpublic String cargarDashboardModulo(Model model) {\r\n+\t\tmodel.addAttribute(\"listaModulo\", moduloService.findActivos() );\r\n+\t\treturn \"DashboardModulo\";\r\n+\t}\r\n+\t\r\n+\t@GetMapping(\"/generar_modulo\")\r\n+\tpublic String cargarCrudModulo(Model model) {\r\n+\t\ttry {\r\n+\t\t\t\r\n+\t\t\tModulo modulo = Modulo.builder().id(moduloService.UltimoId()).build();\r\n+\t\t\tmoduloService.saveModulo(modulo);\r\n+\r\n+\t\t\tmodel.addAttribute(\"listaActividades\",actividadService.findActivosSinModulo());\r\n+\t\t\tmodel.addAttribute(\"modulo\", modulo);\r\n+\t\t\tSystem.out.println(Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n+\t\t\tmodel.addAttribute(\"mensaje\",Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n+\t\t} catch (Exception e) {\r\n+\t\t\tSystem.out.println(Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()));\r\n+\r\n+\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()) );\r\n+\t\t}\r\n+\t\treturn \"FormNewModulo\";\r\n+\t}\r\n+\t\r\n+\t@GetMapping(\"/editar_modulo/{id}\")\r\n+\tpublic String cargarCrudModulo(@PathVariable(\"id\") Long id,Model model) {\r\n+\t\ttry {\r\n+\t\t\t\r\n+\t\t\tModulo modulo = moduloService.findById(id) ;\r\n+\r\n+\t\t\tmodel.addAttribute(\"listaActividades\",actividadService.findActivosSinModulo());\r\n+\t\t\tmodel.addAttribute(\"modulo\", modulo);\r\n+\t\t\tSystem.out.println( Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n+\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n+\t\t} catch (Exception e) {\r\n+\t\t\tSystem.out.println(Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()));\r\n+\r\n+\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()) );\r\n+\t\t}\r\n+\t\treturn \"FormNewModulo\";\r\n+\t}\r\n+\t\r\n+\t@GetMapping(\"/info_modulo/{id}\")\r\n+\tpublic String infoModulo(@PathVariable(\"id\") Long id,Model model) {\r\n+\t\t\r\n+\t\ttry {\r\n+\t\t\t//Logica :\r\n+\t\t\t// En el modulo todas las actividades deberian tener los mismo volutnarios\r\n+\t\t\t//pero se generan las tablas participaciones en la actividad para contabilizar su participacion\r\n+\t\t\t// segun regla de negocio , deberian tener como minimo 6 actividades o 36hrs de actividad para generar constancia\r\n+\r\n+\t\t\tList<Voluntario> listaVoluntarioModulo = voluntarioService.findVoluntarioOfModulo(id);\r\n+\r\n+\t\t\tmodel.addAttribute(\"modulo\", moduloService.findById(id));\r\n+ \t\t\tmodel.addAttribute(\"listaVoluntario\",listaVoluntarioModulo );\r\n+\r\n+\t\t\tSystem.out.println( Mensajes.success(\"MODULO\", \"BUSQUEDA\"));\r\n+\t\t\tmodel.addAttribute(\"mensaje\",  Mensajes.success(\"MODULO\", \"BUSQUEDA\"));\r\n+\t\t\t\r\n+\t\t\treturn \"InfoModulo\";\r\n+\t\t\t\r\n+\t\t} catch (Exception e) {\r\n+\t\t\tSystem.out.println(Mensajes.error(\"MODULO\", \"BUSQUEDA\").concat(e.toString()));\r\n+\r\n+\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.error(\"MODULO\", \"BUSQUEDA\").concat(e.toString()) );\r\n+\t\t}\r\n+\t\treturn \"redirect:/dashboard_modulo\";\r\n+\t}\r\n+\t@GetMapping(\"/addActividadToModulo/{actividadId}\")\r\n+\tpublic String agregarActividad(@PathVariable Long actividadId , @RequestParam Long moduloId ,Model model){\r\n+\t\t\r\n+\t\tModulo modulo = moduloService.findById(moduloId);\t\t\r\n+\t\tActividad actividad = actividadService.findById(actividadId);\r\n+\t\tList<Actividad> ListActividad = modulo.getActividad();\r\n+\r\n+\t\tif (!ListActividad.contains(actividad) ) {\r\n+\t\t\tactividad.setIdModuloActividad(moduloId);\r\n+\t\t\tList<Long> lstaVoluntariosModulo =  voluntarioService.findVoluntarioOfModulo(moduloId).stream().map(Voluntario::getId).toList();\r\n+\r\n+\t\t\tparticipanteService.saveVoluntariosToActividad(lstaVoluntariosModulo,actividadId,Modalidades.ID_MODULO,false);\r\n+\t\t\tactividadService.saveActividad(actividad);\r\n+\r\n+\t\t\tListActividad.add(actividad);\r\n+\t\t\tmodulo.setActividad(ListActividad );\r\n+\r\n+\t\t}\r\n+\t\tmodel.addAttribute(\"modulo\", modulo);\r\n+\t\tmodel.addAttribute(\"listaActividades\",actividadService.findActivosSinModulo());\r\n+\r\n+\t\treturn \"FormNewModulo\";\r\n+\t}\r\n+\t@GetMapping(\"/deleteActividadToModulo/{actividadId}\")\r\n+\tpublic String quitarActividad(@PathVariable Long actividadId , @RequestParam Long moduloId ,Model model){\r\n+\t\t\r\n+\t\tModulo modulo = moduloService.findById(moduloId);\t\t\r\n+\t\tActividad actividad = actividadService.findById(actividadId);\r\n+\r\n+\t\tList<Actividad> ListActividad = modulo.getActividad();\t\r\n+\t\tif (ListActividad.contains(actividad) ) {\r\n+\t\t\tactividad.setIdModuloActividad(null);\r\n+\t\t\tactividadService.saveActividad(actividad);\r\n+\t\t\t\r\n+\t\t\tListActividad.remove(actividad);\r\n+\t\t\tmodulo.setActividad(ListActividad );\r\n+\t\t\tmodel.addAttribute(\"modulo\", modulo);\r\n+\t\t\tmodel.addAttribute(\"listaActividades\",actividadService.findActivosSinModulo());\r\n+\r\n+\t\t}else {\r\n+\t\t\tmodel.addAttribute(\"modulo\", modulo);\r\n+\t\t\tmodel.addAttribute(\"listaActividades\",actividadService.findActivosSinModulo());\r\n+\t\t\t\r\n+\t\t}\r\n+\t\treturn \"FormNewModulo\";\r\n+\t}\r\n+\t@PostMapping(\"/guardar_modulo\")\r\n+\tpublic String guardar_modulo(@ModelAttribute Modulo modulo,Model model) {\r\n+\t\r\n+\t\ttry {\r\n+\t\t\tmoduloService.saveModulo(modulo);\r\n+\t\t\tSystem.out.println( Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n+\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n+\t\t} catch (Exception e) {\r\n+\t\t\tSystem.out.println( Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()) );\r\n+\t\t\tmodel.addAttribute(\"mensaje\",Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()) );\r\n+\t\t}\r\n+\t\treturn \"redirect:/dashboard_modulo\";\r\n+\t}\r\n+\t@GetMapping(\"/regresar_dashboard/{id}\")\r\n+\tpublic String regresar_dashboard(@PathVariable(\"id\") Long id,Model model) {\r\n+\t\r\n+\t\ttry {\r\n+\t\t\tModulo modulo = moduloService.findById(id);\t\t\r\n+\t\t\tif (\t\r\n+\t\t\t\t\tmodulo.getNombre()== null &&\r\n+\t\t\t\t\tmodulo.getActividad().size() == 0\r\n+\t\t\t\t\t) {\t\t\t\t\r\n+\t\t\t\tmoduloService.deleteModulo(modulo);\r\n+\t\t\t\tSystem.out.println(Mensajes.error(\"MODULO\", \"ELIMINACION\"));\r\n+\t\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.error(\"MODULO\", \"ELIMINACION\"));\r\n+\t\t\t}\r\n+\t\t\t\r\n+\t\t\t\r\n+\t\t\t\r\n+\t\t} catch (Exception e) {\r\n+\t\t\tSystem.out.println( Mensajes.error(\"MODULO\", \"ELIMINACION\").concat(e.toString()) );\r\n+\r\n+\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.error(\"MODULO\", \"ELIMINACION\").concat(e.toString()) );\r\n+\t\t}\r\n+\t\t\r\n+\t\treturn \"redirect:/dashboard_modulo\";\r\n+\t}\r\n+\t@GetMapping(\"/retirarActividadFromModulo/{actividadId}\")\r\n+\tpublic String retirarActividadFromModulo(@PathVariable Long actividadId , @RequestParam Long moduloId , Model model, HttpServletRequest request){\r\n+\t\tString pagina_anterior = request.getHeader(\"referer\");\r\n+\t\ttry {\r\n+\t\t\tModulo modulo = moduloService.findById(moduloId);\r\n+\t\t\tActividad actividad = actividadService.findById(actividadId);\r\n+\r\n+\r\n+\t\t\tList<Participante> lstaParticipantesFromActividad  = participanteService.findParticipantesFromActividad(actividadId);\r\n+\r\n+\r\n+\t\t\tparticipanteService.deleteListOfParticipante(lstaParticipantesFromActividad.stream().filter(participante -> participante.getIdTipoParticipacion() == Modalidades.ID_MODULO).collect(Collectors.toList()));\r\n+\r\n+\t\t\tactividad.setModulo(null);\r\n+\t\t\tactividadService.saveActividad(actividad);\r\n+\t\t\tmodulo.getActividad().remove(actividad);\r\n+\t\t\tmoduloService.saveModulo(modulo);\r\n+\r\n+\t\t} catch (Exception e) {\r\n+\t\t\tSystem.out.println(Mensajes.error(\"Actividad from Modulo\", \"ELIMINACION\").concat(e.toString()));\r\n+\t\t\tmodel.addAttribute(\"mensaje\" , Mensajes.error(\"Actividad from Modulo\" , \"ELIMINACION\").concat(e.toString()));\r\n+\r\n+\t\t}\r\n+\t\treturn \"redirect:\"+pagina_anterior;\r\n+\t}\r\n+\t@GetMapping(\"/removeVoluntarioFromModulo/{voluntarioId}\")\r\n+\tpublic String removeVoluntarioFromModulo(\r\n+\t\t\t@PathVariable Long voluntarioId ,\r\n+\t\t\t@RequestParam Long moduloId ,\r\n+\t\t\tModel model,\r\n+\t\t\tHttpServletRequest request){\r\n+\t\tSystem.out.println(\"Volutnario id :\" + voluntarioId);\r\n+\t\tSystem.out.println(\"Modulo id :\" + moduloId);\r\n+\t\tString pagina_anterior = request.getHeader(\"referer\");\r\n+\t\tModulo modulo = moduloService.findById(moduloId);\r\n+\t\tList<Actividad> listActividadFromModulo = modulo.getActividad();\r\n+\t\tSystem.out.println(\"ITERACION ACTIVIDADES DEL MODULO INICIO\");\r\n+\t\tfor (Actividad actividad: listActividadFromModulo ) {\r\n+\t\t\tParticipante participante = participanteService.findParticipantefromVoluntarioYActividad(voluntarioId,actividad.getId());\r\n+\t\t\tparticipanteService.deleteParticipante(participante);\r\n+\t\t\tSystem.out.println(\"Elminacion de actividad\");\r\n+\r\n+\t\t}\r\n+\t\tSystem.out.println(\"ITERACION ACTIVIDADES DEL MODULO FIN\");\r\n+\t\treturn \"redirect:\"+pagina_anterior;\r\n+\t}\r\n+\r\n+\r\n+\t@PostMapping(\"/generar_constancias_modulo/{id}\")\r\n+\tpublic String generar_constancias_modulo(\r\n+\t\t\t@PathVariable(\"id\") Long idModulo,\r\n+\t\t\t@RequestParam(\"pathFile\") String path,\r\n+\t\t\tHttpServletRequest request,\r\n+\t\t\tModel model) {\r\n+\t\ttry {\r\n+\t\t\tModulo modulo = moduloService.findById(idModulo);\r\n+\t\t\tpath = ubicacionConstanciasService.validarPath(path,modulo);\r\n+\t\t\tList<StatusVoluntarioModulo> lstaVoluntario = voluntarioService.getVoluntarioFromModuloHoursOkAndIsParticipant(modulo);\r\n+ \t\t\tList<PlantillaModuloDto> listPlantillaDto = PlantillaParser.listStatusVoluntarioToPlantillaDtoModulo(lstaVoluntario,modulo);\r\n+\t\t\tfor (PlantillaModuloDto plantillaDto : listPlantillaDto) {\r\n+\r\n+\t\t\t\tPlantillas.convertirHTMLaPDF(\r\n+\t\t\t\t\t\tPlantillas.GenerarPlantillaModulo(plantillaDto),\r\n+\t\t\t\t\t\tpath + \"/\" + plantillaDto.getStatusVoluntarioModulo().getVoluntario().getDni()+ \".pdf\");\r\n+\t\t\t}\r\n+\t\t\tSystem.out.println(Mensajes.success(\"Archivo\", \"Generacion\"));\r\n+\t\t}catch (Exception e) {\r\n+\t\t\tSystem.out.println(Mensajes.error(\"Archivo\", \"Generacion\").concat(e.toString()));\r\n+\t\t}\r\n+\t\treturn \"redirect:/dashboard_modulo\";\r\n+\t}\r\n+\r\n+\t@GetMapping(\"/ver_estatus_voluntarios/{id}\")\r\n+\tpublic String ver_estatus_voluntarios(\r\n+\t\t\t@PathVariable(\"id\") Long idModulo,\r\n+\t\t\tHttpServletRequest request,\r\n+\t\t\tModel model\r\n+\t){\r\n+\t\ttry {\r\n+\t\t\tModulo modulo = moduloService.findById(idModulo);\r\n+\r\n+\t\t\tSystem.out.println(\"Inicio de verificacion de horas\");\r\n+\t\t\tList<StatusVoluntarioModulo> lstResponse = voluntarioService.getVoluntarioFromModuloHoursOkAndIsParticipant(modulo);\r\n+\r\n+\t\t\tSystem.out.println(lstResponse.toString());\r\n+\t\t\tmodel.addAttribute(\"lstResponse\",lstResponse);\r\n+\t\t\tmodel.addAttribute(\"modulo\",modulo);\r\n+\r\n+\t\t\tSystem.out.println(\"Fin de verificacion de horas\");\r\n+\r\n+\t\t\treturn \"EstatusModulo\";\r\n+\t\t}catch (Exception e){\r\n+\t\t\tSystem.out.println(Mensajes.error(\"Status\", \"Generacion\").concat(e.toString()));\r\n+\t\t\treturn Tools.paginaAnterior(request);\r\n+\r\n+\t\t}\r\n+\r\n+\t}\r\n+\r\n+\t@GetMapping(\"/convertir_modulo/{id}\")\r\n+\tpublic String convertir_modulo(\r\n+\t\t\tHttpServletRequest  request,\r\n+\t\t\t@PathVariable(\"id\") Long idParticipante,\r\n+\t\t\tModel model){\r\n+\t\ttry {\r\n+\t\t\tParticipante participante = participanteService.findById(idParticipante);\r\n+\t\t\tLong idModulo = participante.getActividad().getIdModuloActividad();\r\n+\t\t\tModulo modulo = moduloService.findById(idModulo);\r\n+\t\t\tif ( modulo != null ){\r\n+\t\t\t\t//Aca estan las actividades que participo de manera \"libre\"\r\n+\t\t\t\tList<Participante> lstActividadesParticipadas = participanteService.obtenerParticipacionAsociadasByModuloId(participante.getIdVoluntario(),idModulo);\r\n+\r\n+\t\t\t\t//Se busca primero cambiar el tipo de participacion a modulo\r\n+\t\t\t\tfor (Participante p :\r\n+\t\t\t\t\tlstActividadesParticipadas) {\r\n+\t\t\t\t\tp.setIdTipoParticipacion(Modalidades.ID_MODULO);\r\n+\t\t\t\t\tparticipanteService.saveParticipante(p);\r\n+\t\t\t\t}\r\n+\r\n+\t\t\t\tList<Actividad> lstActividadesFaltantes =\r\n+\t\t\t\t\tactividadService.recuperarFaltantes(\r\n+\t\t\t\t\t\tactividadService.obtenerActividesFromParticipaciones(\r\n+\t\t\t\t\t\t\tlstActividadesParticipadas),\r\n+\t\t\t\t\t\tmodulo.getActividad());\r\n+\r\n+\t\t\t\tfor (Actividad actividad:\r\n+\t\t\t\t\tlstActividadesFaltantes) {\r\n+\r\n+\t\t\t\t\tparticipanteService.saveParticipante(\r\n+\t\t\t\t\t\t\tParticipante.builder()\r\n+\t\t\t\t\t\t\t\t\t.isParticipant(Boolean.FALSE)\r\n+\t\t\t\t\t\t\t\t\t.idActividad(actividad.getId())\r\n+\t\t\t\t\t\t\t\t\t.idVoluntario(participante.getIdVoluntario())\r\n+\t\t\t\t\t\t\t\t\t.idTipoParticipacion(Modalidades.ID_MODULO)\r\n+\t\t\t\t\t\t\t\t\t.build()\r\n+\t\t\t\t\t);\r\n+\r\n+\t\t\t\t}\r\n+\t\t\t\tSystem.out.println(\"Se asocio el voluntario al modulo :\"+ modulo.toString());\r\n+\t\t\t}else {\r\n+\t\t\t\tSystem.out.println(\"La actividad no esta asociada a un modulo\");\r\n+\t\t\t}\r\n+\t\t\treturn Tools.paginaAnterior(request);\r\n+\t\t}catch (Exception e){\r\n+\t\t\tSystem.out.println(Mensajes.error(\"Error al convertir tipo de participacion a modulo\").concat(e.toString()));\r\n+\t\t\treturn Tools.paginaAnterior(request);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@GetMapping(\"/convertir_libre/{id}\")\r\n+\tpublic String convertir_modulo(\r\n+\t\t\tHttpServletRequest  request,\r\n+\t\t\t@PathVariable(\"id\") Long idParticipante,\r\n+\t\t\tModel model){\r\n+\t\ttry {\r\n+\t\t\tParticipante participante = participanteService.findById(idParticipante);\r\n+\t\t\tLong idModulo = participante.getActividad().getIdModuloActividad();\r\n+\t\t\tModulo modulo = moduloService.findById(idModulo);\r\n+\t\t\tif ( modulo != null ){\r\n+\t\t\t\t//Aca estan las actividades que participo de manera \"libre\"\r\n+\t\t\t\tList<Participante> lstActividadesParticipadas = participanteService.obtenerParticipacionAsociadasByModuloId(participante.getIdVoluntario(),idModulo);\r\n+\r\n+\t\t\t\t//Se busca primero cambiar el tipo de participacion a modulo\r\n+\t\t\t\tfor (Participante p :\r\n+\t\t\t\t\tlstActividadesParticipadas) {\r\n+\t\t\t\t\tp.setIdTipoParticipacion(Modalidades.ID_MODULO);\r\n+\t\t\t\t\tparticipanteService.saveParticipante(p);\r\n+\t\t\t\t}\r\n+\r\n+\t\t\t\tList<Actividad> lstActividadesFaltantes =\r\n+\t\t\t\t\tactividadService.recuperarFaltantes(\r\n+\t\t\t\t\t\tactividadService.obtenerActividesFromParticipaciones(\r\n+\t\t\t\t\t\t\tlstActividadesParticipadas),\r\n+\t\t\t\t\t\tmodulo.getActividad());\r\n+\r\n+\t\t\t\tfor (Actividad actividad:\r\n+\t\t\t\t\tlstActividadesFaltantes) {\r\n+\r\n+\t\t\t\t\tparticipanteService.saveParticipante(\r\n+\t\t\t\t\t\t\tParticipante.builder()\r\n+\t\t\t\t\t\t\t\t\t.isParticipant(Boolean.FALSE)\r\n+\t\t\t\t\t\t\t\t\t.idActividad(actividad.getId())\r\n+\t\t\t\t\t\t\t\t\t.idVoluntario(participante.getIdVoluntario())\r\n+\t\t\t\t\t\t\t\t\t.idTipoParticipacion(Modalidades.ID_MODULO)\r\n+\t\t\t\t\t\t\t\t\t.build()\r\n+\t\t\t\t\t);\r\n+\r\n+\t\t\t\t}\r\n+\t\t\t\tSystem.out.println(\"Se asocio el voluntario al modulo :\"+ modulo.toString());\r\n+\t\t\t}else {\r\n+\t\t\t\tSystem.out.println(\"La actividad no esta asociada a un modulo\");\r\n+\t\t\t}\r\n+\t\t\treturn Tools.paginaAnterior(request);\r\n+\t\t}catch (Exception e){\r\n+\t\t\tSystem.out.println(Mensajes.error(\"Error al convertir tipo de participacion a modulo\").concat(e.toString()));\r\n+\t\t\treturn Tools.paginaAnterior(request);\r\n+\t\t}\r\n+\t}\r\n+\r\n+}\r\n"
                },
                {
                    "date": 1717174590309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -331,9 +331,9 @@\n \t\t}\r\n \t}\r\n \r\n \t@GetMapping(\"/convertir_libre/{id}\")\r\n-\tpublic String convertir_modulo(\r\n+\tpublic String convertir_libre(\r\n \t\t\tHttpServletRequest  request,\r\n \t\t\t@PathVariable(\"id\") Long idParticipante,\r\n \t\t\tModel model){\r\n \t\ttry {\r\n"
                },
                {
                    "date": 1717174889079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -346,9 +346,9 @@\n \r\n \t\t\t\t//Se busca primero cambiar el tipo de participacion a modulo\r\n \t\t\t\tfor (Participante p :\r\n \t\t\t\t\tlstActividadesParticipadas) {\r\n-\t\t\t\t\tp.setIdTipoParticipacion(Modalidades.ID_MODULO);\r\n+\t\t\t\t\tp.setIdTipoParticipacion(Modalidades.LIBRE);\r\n \t\t\t\t\tparticipanteService.saveParticipante(p);\r\n \t\t\t\t}\r\n \r\n \t\t\t\tList<Actividad> lstActividadesFaltantes =\r\n"
                },
                {
                    "date": 1717174900780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -346,9 +346,9 @@\n \r\n \t\t\t\t//Se busca primero cambiar el tipo de participacion a modulo\r\n \t\t\t\tfor (Participante p :\r\n \t\t\t\t\tlstActividadesParticipadas) {\r\n-\t\t\t\t\tp.setIdTipoParticipacion(Modalidades.LIBRE);\r\n+\t\t\t\t\tp.setIdTipoParticipacion(Modalidades.);\r\n \t\t\t\t\tparticipanteService.saveParticipante(p);\r\n \t\t\t\t}\r\n \r\n \t\t\t\tList<Actividad> lstActividadesFaltantes =\r\n@@ -381,725 +381,4 @@\n \t\t}\r\n \t}\r\n \r\n }\r\n-package com.sebasgoy.controller;\r\n-\r\n-import java.util.List;\r\n-import java.util.stream.Collectors;\r\n-\r\n-import com.sebasgoy.Parser.PlantillaParser;\r\n-import com.sebasgoy.constantes.Modalidades;\r\n-import com.sebasgoy.constantes.Plantillas;\r\n-import com.sebasgoy.dto.Participante;\r\n-import com.sebasgoy.dto.Voluntario;\r\n-import com.sebasgoy.dto.request.PlantillaModuloDto;\r\n-import com.sebasgoy.dto.response.StatusVoluntarioModulo;\r\n-import com.sebasgoy.service.*;\r\n-import com.sebasgoy.util.Tools;\r\n-import jakarta.servlet.http.HttpServletRequest;\r\n-import lombok.AllArgsConstructor;\r\n-import org.springframework.stereotype.Controller;\r\n-import org.springframework.ui.Model;\r\n-import org.springframework.web.bind.annotation.*;\r\n-import com.sebasgoy.dto.Actividad;\r\n-import com.sebasgoy.dto.Modulo;\r\n-import com.sebasgoy.constantes.Mensajes;\r\n- \r\n-@Controller\r\n-@AllArgsConstructor\r\n-public class ModuloController {\r\n-\r\n-\tprivate final ModuloService moduloService;\r\n-\tprivate final ActividadService actividadService;\r\n-\tprivate final VoluntarioService voluntarioService;\r\n-\tprivate final ParticipanteService participanteService;\r\n-\tprivate final UbicacionConstanciasService ubicacionConstanciasService;\r\n-\t@GetMapping(\"/dashboard_modulo\")\r\n-\tpublic String cargarDashboardModulo(Model model) {\r\n-\t\tmodel.addAttribute(\"listaModulo\", moduloService.findActivos() );\r\n-\t\treturn \"DashboardModulo\";\r\n-\t}\r\n-\t\r\n-\t@GetMapping(\"/generar_modulo\")\r\n-\tpublic String cargarCrudModulo(Model model) {\r\n-\t\ttry {\r\n-\t\t\t\r\n-\t\t\tModulo modulo = Modulo.builder().id(moduloService.UltimoId()).build();\r\n-\t\t\tmoduloService.saveModulo(modulo);\r\n-\r\n-\t\t\tmodel.addAttribute(\"listaActividades\",actividadService.findActivosSinModulo());\r\n-\t\t\tmodel.addAttribute(\"modulo\", modulo);\r\n-\t\t\tSystem.out.println(Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n-\t\t\tmodel.addAttribute(\"mensaje\",Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n-\t\t} catch (Exception e) {\r\n-\t\t\tSystem.out.println(Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()));\r\n-\r\n-\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()) );\r\n-\t\t}\r\n-\t\treturn \"FormNewModulo\";\r\n-\t}\r\n-\t\r\n-\t@GetMapping(\"/editar_modulo/{id}\")\r\n-\tpublic String cargarCrudModulo(@PathVariable(\"id\") Long id,Model model) {\r\n-\t\ttry {\r\n-\t\t\t\r\n-\t\t\tModulo modulo = moduloService.findById(id) ;\r\n-\r\n-\t\t\tmodel.addAttribute(\"listaActividades\",actividadService.findActivosSinModulo());\r\n-\t\t\tmodel.addAttribute(\"modulo\", modulo);\r\n-\t\t\tSystem.out.println( Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n-\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n-\t\t} catch (Exception e) {\r\n-\t\t\tSystem.out.println(Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()));\r\n-\r\n-\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()) );\r\n-\t\t}\r\n-\t\treturn \"FormNewModulo\";\r\n-\t}\r\n-\t\r\n-\t@GetMapping(\"/info_modulo/{id}\")\r\n-\tpublic String infoModulo(@PathVariable(\"id\") Long id,Model model) {\r\n-\t\t\r\n-\t\ttry {\r\n-\t\t\t//Logica :\r\n-\t\t\t// En el modulo todas las actividades deberian tener los mismo volutnarios\r\n-\t\t\t//pero se generan las tablas participaciones en la actividad para contabilizar su participacion\r\n-\t\t\t// segun regla de negocio , deberian tener como minimo 6 actividades o 36hrs de actividad para generar constancia\r\n-\r\n-\t\t\tList<Voluntario> listaVoluntarioModulo = voluntarioService.findVoluntarioOfModulo(id);\r\n-\r\n-\t\t\tmodel.addAttribute(\"modulo\", moduloService.findById(id));\r\n- \t\t\tmodel.addAttribute(\"listaVoluntario\",listaVoluntarioModulo );\r\n-\r\n-\t\t\tSystem.out.println( Mensajes.success(\"MODULO\", \"BUSQUEDA\"));\r\n-\t\t\tmodel.addAttribute(\"mensaje\",  Mensajes.success(\"MODULO\", \"BUSQUEDA\"));\r\n-\t\t\t\r\n-\t\t\treturn \"InfoModulo\";\r\n-\t\t\t\r\n-\t\t} catch (Exception e) {\r\n-\t\t\tSystem.out.println(Mensajes.error(\"MODULO\", \"BUSQUEDA\").concat(e.toString()));\r\n-\r\n-\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.error(\"MODULO\", \"BUSQUEDA\").concat(e.toString()) );\r\n-\t\t}\r\n-\t\treturn \"redirect:/dashboard_modulo\";\r\n-\t}\r\n-\t@GetMapping(\"/addActividadToModulo/{actividadId}\")\r\n-\tpublic String agregarActividad(@PathVariable Long actividadId , @RequestParam Long moduloId ,Model model){\r\n-\t\t\r\n-\t\tModulo modulo = moduloService.findById(moduloId);\t\t\r\n-\t\tActividad actividad = actividadService.findById(actividadId);\r\n-\t\tList<Actividad> ListActividad = modulo.getActividad();\r\n-\r\n-\t\tif (!ListActividad.contains(actividad) ) {\r\n-\t\t\tactividad.setIdModuloActividad(moduloId);\r\n-\t\t\tList<Long> lstaVoluntariosModulo =  voluntarioService.findVoluntarioOfModulo(moduloId).stream().map(Voluntario::getId).toList();\r\n-\r\n-\t\t\tparticipanteService.saveVoluntariosToActividad(lstaVoluntariosModulo,actividadId,Modalidades.ID_MODULO,false);\r\n-\t\t\tactividadService.saveActividad(actividad);\r\n-\r\n-\t\t\tListActividad.add(actividad);\r\n-\t\t\tmodulo.setActividad(ListActividad );\r\n-\r\n-\t\t}\r\n-\t\tmodel.addAttribute(\"modulo\", modulo);\r\n-\t\tmodel.addAttribute(\"listaActividades\",actividadService.findActivosSinModulo());\r\n-\r\n-\t\treturn \"FormNewModulo\";\r\n-\t}\r\n-\t@GetMapping(\"/deleteActividadToModulo/{actividadId}\")\r\n-\tpublic String quitarActividad(@PathVariable Long actividadId , @RequestParam Long moduloId ,Model model){\r\n-\t\t\r\n-\t\tModulo modulo = moduloService.findById(moduloId);\t\t\r\n-\t\tActividad actividad = actividadService.findById(actividadId);\r\n-\r\n-\t\tList<Actividad> ListActividad = modulo.getActividad();\t\r\n-\t\tif (ListActividad.contains(actividad) ) {\r\n-\t\t\tactividad.setIdModuloActividad(null);\r\n-\t\t\tactividadService.saveActividad(actividad);\r\n-\t\t\t\r\n-\t\t\tListActividad.remove(actividad);\r\n-\t\t\tmodulo.setActividad(ListActividad );\r\n-\t\t\tmodel.addAttribute(\"modulo\", modulo);\r\n-\t\t\tmodel.addAttribute(\"listaActividades\",actividadService.findActivosSinModulo());\r\n-\r\n-\t\t}else {\r\n-\t\t\tmodel.addAttribute(\"modulo\", modulo);\r\n-\t\t\tmodel.addAttribute(\"listaActividades\",actividadService.findActivosSinModulo());\r\n-\t\t\t\r\n-\t\t}\r\n-\t\treturn \"FormNewModulo\";\r\n-\t}\r\n-\t@PostMapping(\"/guardar_modulo\")\r\n-\tpublic String guardar_modulo(@ModelAttribute Modulo modulo,Model model) {\r\n-\t\r\n-\t\ttry {\r\n-\t\t\tmoduloService.saveModulo(modulo);\r\n-\t\t\tSystem.out.println( Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n-\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n-\t\t} catch (Exception e) {\r\n-\t\t\tSystem.out.println( Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()) );\r\n-\t\t\tmodel.addAttribute(\"mensaje\",Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()) );\r\n-\t\t}\r\n-\t\treturn \"redirect:/dashboard_modulo\";\r\n-\t}\r\n-\t@GetMapping(\"/regresar_dashboard/{id}\")\r\n-\tpublic String regresar_dashboard(@PathVariable(\"id\") Long id,Model model) {\r\n-\t\r\n-\t\ttry {\r\n-\t\t\tModulo modulo = moduloService.findById(id);\t\t\r\n-\t\t\tif (\t\r\n-\t\t\t\t\tmodulo.getNombre()== null &&\r\n-\t\t\t\t\tmodulo.getActividad().size() == 0\r\n-\t\t\t\t\t) {\t\t\t\t\r\n-\t\t\t\tmoduloService.deleteModulo(modulo);\r\n-\t\t\t\tSystem.out.println(Mensajes.error(\"MODULO\", \"ELIMINACION\"));\r\n-\t\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.error(\"MODULO\", \"ELIMINACION\"));\r\n-\t\t\t}\r\n-\t\t\t\r\n-\t\t\t\r\n-\t\t\t\r\n-\t\t} catch (Exception e) {\r\n-\t\t\tSystem.out.println( Mensajes.error(\"MODULO\", \"ELIMINACION\").concat(e.toString()) );\r\n-\r\n-\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.error(\"MODULO\", \"ELIMINACION\").concat(e.toString()) );\r\n-\t\t}\r\n-\t\t\r\n-\t\treturn \"redirect:/dashboard_modulo\";\r\n-\t}\r\n-\t@GetMapping(\"/retirarActividadFromModulo/{actividadId}\")\r\n-\tpublic String retirarActividadFromModulo(@PathVariable Long actividadId , @RequestParam Long moduloId , Model model, HttpServletRequest request){\r\n-\t\tString pagina_anterior = request.getHeader(\"referer\");\r\n-\t\ttry {\r\n-\t\t\tModulo modulo = moduloService.findById(moduloId);\r\n-\t\t\tActividad actividad = actividadService.findById(actividadId);\r\n-\r\n-\r\n-\t\t\tList<Participante> lstaParticipantesFromActividad  = participanteService.findParticipantesFromActividad(actividadId);\r\n-\r\n-\r\n-\t\t\tparticipanteService.deleteListOfParticipante(lstaParticipantesFromActividad.stream().filter(participante -> participante.getIdTipoParticipacion() == Modalidades.ID_MODULO).collect(Collectors.toList()));\r\n-\r\n-\t\t\tactividad.setModulo(null);\r\n-\t\t\tactividadService.saveActividad(actividad);\r\n-\t\t\tmodulo.getActividad().remove(actividad);\r\n-\t\t\tmoduloService.saveModulo(modulo);\r\n-\r\n-\t\t} catch (Exception e) {\r\n-\t\t\tSystem.out.println(Mensajes.error(\"Actividad from Modulo\", \"ELIMINACION\").concat(e.toString()));\r\n-\t\t\tmodel.addAttribute(\"mensaje\" , Mensajes.error(\"Actividad from Modulo\" , \"ELIMINACION\").concat(e.toString()));\r\n-\r\n-\t\t}\r\n-\t\treturn \"redirect:\"+pagina_anterior;\r\n-\t}\r\n-\t@GetMapping(\"/removeVoluntarioFromModulo/{voluntarioId}\")\r\n-\tpublic String removeVoluntarioFromModulo(\r\n-\t\t\t@PathVariable Long voluntarioId ,\r\n-\t\t\t@RequestParam Long moduloId ,\r\n-\t\t\tModel model,\r\n-\t\t\tHttpServletRequest request){\r\n-\t\tSystem.out.println(\"Volutnario id :\" + voluntarioId);\r\n-\t\tSystem.out.println(\"Modulo id :\" + moduloId);\r\n-\t\tString pagina_anterior = request.getHeader(\"referer\");\r\n-\t\tModulo modulo = moduloService.findById(moduloId);\r\n-\t\tList<Actividad> listActividadFromModulo = modulo.getActividad();\r\n-\t\tSystem.out.println(\"ITERACION ACTIVIDADES DEL MODULO INICIO\");\r\n-\t\tfor (Actividad actividad: listActividadFromModulo ) {\r\n-\t\t\tParticipante participante = participanteService.findParticipantefromVoluntarioYActividad(voluntarioId,actividad.getId());\r\n-\t\t\tparticipanteService.deleteParticipante(participante);\r\n-\t\t\tSystem.out.println(\"Elminacion de actividad\");\r\n-\r\n-\t\t}\r\n-\t\tSystem.out.println(\"ITERACION ACTIVIDADES DEL MODULO FIN\");\r\n-\t\treturn \"redirect:\"+pagina_anterior;\r\n-\t}\r\n-\r\n-\r\n-\t@PostMapping(\"/generar_constancias_modulo/{id}\")\r\n-\tpublic String generar_constancias_modulo(\r\n-\t\t\t@PathVariable(\"id\") Long idModulo,\r\n-\t\t\t@RequestParam(\"pathFile\") String path,\r\n-\t\t\tHttpServletRequest request,\r\n-\t\t\tModel model) {\r\n-\t\ttry {\r\n-\t\t\tModulo modulo = moduloService.findById(idModulo);\r\n-\t\t\tpath = ubicacionConstanciasService.validarPath(path,modulo);\r\n-\t\t\tList<StatusVoluntarioModulo> lstaVoluntario = voluntarioService.getVoluntarioFromModuloHoursOkAndIsParticipant(modulo);\r\n- \t\t\tList<PlantillaModuloDto> listPlantillaDto = PlantillaParser.listStatusVoluntarioToPlantillaDtoModulo(lstaVoluntario,modulo);\r\n-\t\t\tfor (PlantillaModuloDto plantillaDto : listPlantillaDto) {\r\n-\r\n-\t\t\t\tPlantillas.convertirHTMLaPDF(\r\n-\t\t\t\t\t\tPlantillas.GenerarPlantillaModulo(plantillaDto),\r\n-\t\t\t\t\t\tpath + \"/\" + plantillaDto.getStatusVoluntarioModulo().getVoluntario().getDni()+ \".pdf\");\r\n-\t\t\t}\r\n-\t\t\tSystem.out.println(Mensajes.success(\"Archivo\", \"Generacion\"));\r\n-\t\t}catch (Exception e) {\r\n-\t\t\tSystem.out.println(Mensajes.error(\"Archivo\", \"Generacion\").concat(e.toString()));\r\n-\t\t}\r\n-\t\treturn \"redirect:/dashboard_modulo\";\r\n-\t}\r\n-\r\n-\t@GetMapping(\"/ver_estatus_voluntarios/{id}\")\r\n-\tpublic String ver_estatus_voluntarios(\r\n-\t\t\t@PathVariable(\"id\") Long idModulo,\r\n-\t\t\tHttpServletRequest request,\r\n-\t\t\tModel model\r\n-\t){\r\n-\t\ttry {\r\n-\t\t\tModulo modulo = moduloService.findById(idModulo);\r\n-\r\n-\t\t\tSystem.out.println(\"Inicio de verificacion de horas\");\r\n-\t\t\tList<StatusVoluntarioModulo> lstResponse = voluntarioService.getVoluntarioFromModuloHoursOkAndIsParticipant(modulo);\r\n-\r\n-\t\t\tSystem.out.println(lstResponse.toString());\r\n-\t\t\tmodel.addAttribute(\"lstResponse\",lstResponse);\r\n-\t\t\tmodel.addAttribute(\"modulo\",modulo);\r\n-\r\n-\t\t\tSystem.out.println(\"Fin de verificacion de horas\");\r\n-\r\n-\t\t\treturn \"EstatusModulo\";\r\n-\t\t}catch (Exception e){\r\n-\t\t\tSystem.out.println(Mensajes.error(\"Status\", \"Generacion\").concat(e.toString()));\r\n-\t\t\treturn Tools.paginaAnterior(request);\r\n-\r\n-\t\t}\r\n-\r\n-\t}\r\n-\r\n-\t@GetMapping(\"/convertir_modulo/{id}\")\r\n-\tpublic String convertir_modulo(\r\n-\t\t\tHttpServletRequest  request,\r\n-\t\t\t@PathVariable(\"id\") Long idParticipante,\r\n-\t\t\tModel model){\r\n-\t\ttry {\r\n-\t\t\tParticipante participante = participanteService.findById(idParticipante);\r\n-\t\t\tLong idModulo = participante.getActividad().getIdModuloActividad();\r\n-\t\t\tModulo modulo = moduloService.findById(idModulo);\r\n-\t\t\tif ( modulo != null ){\r\n-\t\t\t\t//Aca estan las actividades que participo de manera \"libre\"\r\n-\t\t\t\tList<Participante> lstActividadesParticipadas = participanteService.obtenerParticipacionAsociadasByModuloId(participante.getIdVoluntario(),idModulo);\r\n-\r\n-\t\t\t\t//Se busca primero cambiar el tipo de participacion a modulo\r\n-\t\t\t\tfor (Participante p :\r\n-\t\t\t\t\tlstActividadesParticipadas) {\r\n-\t\t\t\t\tp.setIdTipoParticipacion(Modalidades.ID_MODULO);\r\n-\t\t\t\t\tparticipanteService.saveParticipante(p);\r\n-\t\t\t\t}\r\n-\r\n-\t\t\t\tList<Actividad> lstActividadesFaltantes =\r\n-\t\t\t\t\tactividadService.recuperarFaltantes(\r\n-\t\t\t\t\t\tactividadService.obtenerActividesFromParticipaciones(\r\n-\t\t\t\t\t\t\tlstActividadesParticipadas),\r\n-\t\t\t\t\t\tmodulo.getActividad());\r\n-\r\n-\t\t\t\tfor (Actividad actividad:\r\n-\t\t\t\t\tlstActividadesFaltantes) {\r\n-\r\n-\t\t\t\t\tparticipanteService.saveParticipante(\r\n-\t\t\t\t\t\t\tParticipante.builder()\r\n-\t\t\t\t\t\t\t\t\t.isParticipant(Boolean.FALSE)\r\n-\t\t\t\t\t\t\t\t\t.idActividad(actividad.getId())\r\n-\t\t\t\t\t\t\t\t\t.idVoluntario(participante.getIdVoluntario())\r\n-\t\t\t\t\t\t\t\t\t.idTipoParticipacion(Modalidades.ID_MODULO)\r\n-\t\t\t\t\t\t\t\t\t.build()\r\n-\t\t\t\t\t);\r\n-\r\n-\t\t\t\t}\r\n-\t\t\t\tSystem.out.println(\"Se asocio el voluntario al modulo :\"+ modulo.toString());\r\n-\t\t\t}else {\r\n-\t\t\t\tSystem.out.println(\"La actividad no esta asociada a un modulo\");\r\n-\t\t\t}\r\n-\t\t\treturn Tools.paginaAnterior(request);\r\n-\t\t}catch (Exception e){\r\n-\t\t\tSystem.out.println(Mensajes.error(\"Error al convertir tipo de participacion a modulo\").concat(e.toString()));\r\n-\t\t\treturn Tools.paginaAnterior(request);\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t@GetMapping(\"/convertir_modulo/{id}\")\r\n-\tpublic String convertir_modulo(\r\n-\t\t\tHttpServletRequest  request,\r\n-\t\t\t@PathVariable(\"id\") Long idParticipante,\r\n-\t\t\tModel model){\r\n-\t\ttry {\r\n-\t\t\tParticipante participante = participanteService.findById(idParticipante);\r\n-\t\t\tLong idModulo = participante.getActividad().getIdModuloActividad();\r\n-\t\t\tModulo modulo = moduloService.findById(idModulo);\r\n-\t\t\tif ( modulo != null ){\r\n-\t\t\t\t//Aca estan las actividades que participo de manera \"libre\"\r\n-\t\t\t\tList<Participante> lstActividadesParticipadas = participanteService.obtenerParticipacionAsociadasByModuloId(participante.getIdVoluntario(),idModulo);\r\n-\r\n-\t\t\t\t//Se busca primero cambiar el tipo de participacion a modulo\r\n-\t\t\t\tfor (Participante p :\r\n-\t\t\t\t\tlstActividadesParticipadas) {\r\n-\t\t\t\t\tp.setIdTipoParticipacion(Modalidades.ID_MODULO);\r\n-\t\t\t\t\tparticipanteService.saveParticipante(p);\r\n-\t\t\t\t}\r\n-\r\n-\t\t\t\tList<Actividad> lstActividadesFaltantes =\r\n-\t\t\t\t\tactividadService.recuperarFaltantes(\r\n-\t\t\t\t\t\tactividadService.obtenerActividesFromParticipaciones(\r\n-\t\t\t\t\t\t\tlstActividadesParticipadas),\r\n-\t\t\t\t\t\tmodulo.getActividad());\r\n-\r\n-\t\t\t\tfor (Actividad actividad:\r\n-\t\t\t\t\tlstActividadesFaltantes) {\r\n-\r\n-\t\t\t\t\tparticipanteService.saveParticipante(\r\n-\t\t\t\t\t\t\tParticipante.builder()\r\n-\t\t\t\t\t\t\t\t\t.isParticipant(Boolean.FALSE)\r\n-\t\t\t\t\t\t\t\t\t.idActividad(actividad.getId())\r\n-\t\t\t\t\t\t\t\t\t.idVoluntario(participante.getIdVoluntario())\r\n-\t\t\t\t\t\t\t\t\t.idTipoParticipacion(Modalidades.ID_MODULO)\r\n-\t\t\t\t\t\t\t\t\t.build()\r\n-\t\t\t\t\t);\r\n-\r\n-\t\t\t\t}\r\n-\t\t\t\tSystem.out.println(\"Se asocio el voluntario al modulo :\"+ modulo.toString());\r\n-\t\t\t}else {\r\n-\t\t\t\tSystem.out.println(\"La actividad no esta asociada a un modulo\");\r\n-\t\t\t}\r\n-\t\t\treturn Tools.paginaAnterior(request);\r\n-\t\t}catch (Exception e){\r\n-\t\t\tSystem.out.println(Mensajes.error(\"Error al convertir tipo de participacion a modulo\").concat(e.toString()));\r\n-\t\t\treturn Tools.paginaAnterior(request);\r\n-\t\t}\r\n-\t}\r\n-\r\n-}\r\n-package com.sebasgoy.controller;\r\n-\r\n-import java.util.List;\r\n-import java.util.stream.Collectors;\r\n-\r\n-import com.sebasgoy.Parser.PlantillaParser;\r\n-import com.sebasgoy.constantes.Modalidades;\r\n-import com.sebasgoy.constantes.Plantillas;\r\n-import com.sebasgoy.dto.Participante;\r\n-import com.sebasgoy.dto.Voluntario;\r\n-import com.sebasgoy.dto.request.PlantillaModuloDto;\r\n-import com.sebasgoy.dto.response.StatusVoluntarioModulo;\r\n-import com.sebasgoy.service.*;\r\n-import com.sebasgoy.util.Tools;\r\n-import jakarta.servlet.http.HttpServletRequest;\r\n-import lombok.AllArgsConstructor;\r\n-import org.springframework.stereotype.Controller;\r\n-import org.springframework.ui.Model;\r\n-import org.springframework.web.bind.annotation.*;\r\n-import com.sebasgoy.dto.Actividad;\r\n-import com.sebasgoy.dto.Modulo;\r\n-import com.sebasgoy.constantes.Mensajes;\r\n- \r\n-@Controller\r\n-@AllArgsConstructor\r\n-public class ModuloController {\r\n-\r\n-\tprivate final ModuloService moduloService;\r\n-\tprivate final ActividadService actividadService;\r\n-\tprivate final VoluntarioService voluntarioService;\r\n-\tprivate final ParticipanteService participanteService;\r\n-\tprivate final UbicacionConstanciasService ubicacionConstanciasService;\r\n-\t@GetMapping(\"/dashboard_modulo\")\r\n-\tpublic String cargarDashboardModulo(Model model) {\r\n-\t\tmodel.addAttribute(\"listaModulo\", moduloService.findActivos() );\r\n-\t\treturn \"DashboardModulo\";\r\n-\t}\r\n-\t\r\n-\t@GetMapping(\"/generar_modulo\")\r\n-\tpublic String cargarCrudModulo(Model model) {\r\n-\t\ttry {\r\n-\t\t\t\r\n-\t\t\tModulo modulo = Modulo.builder().id(moduloService.UltimoId()).build();\r\n-\t\t\tmoduloService.saveModulo(modulo);\r\n-\r\n-\t\t\tmodel.addAttribute(\"listaActividades\",actividadService.findActivosSinModulo());\r\n-\t\t\tmodel.addAttribute(\"modulo\", modulo);\r\n-\t\t\tSystem.out.println(Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n-\t\t\tmodel.addAttribute(\"mensaje\",Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n-\t\t} catch (Exception e) {\r\n-\t\t\tSystem.out.println(Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()));\r\n-\r\n-\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()) );\r\n-\t\t}\r\n-\t\treturn \"FormNewModulo\";\r\n-\t}\r\n-\t\r\n-\t@GetMapping(\"/editar_modulo/{id}\")\r\n-\tpublic String cargarCrudModulo(@PathVariable(\"id\") Long id,Model model) {\r\n-\t\ttry {\r\n-\t\t\t\r\n-\t\t\tModulo modulo = moduloService.findById(id) ;\r\n-\r\n-\t\t\tmodel.addAttribute(\"listaActividades\",actividadService.findActivosSinModulo());\r\n-\t\t\tmodel.addAttribute(\"modulo\", modulo);\r\n-\t\t\tSystem.out.println( Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n-\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n-\t\t} catch (Exception e) {\r\n-\t\t\tSystem.out.println(Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()));\r\n-\r\n-\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()) );\r\n-\t\t}\r\n-\t\treturn \"FormNewModulo\";\r\n-\t}\r\n-\t\r\n-\t@GetMapping(\"/info_modulo/{id}\")\r\n-\tpublic String infoModulo(@PathVariable(\"id\") Long id,Model model) {\r\n-\t\t\r\n-\t\ttry {\r\n-\t\t\t//Logica :\r\n-\t\t\t// En el modulo todas las actividades deberian tener los mismo volutnarios\r\n-\t\t\t//pero se generan las tablas participaciones en la actividad para contabilizar su participacion\r\n-\t\t\t// segun regla de negocio , deberian tener como minimo 6 actividades o 36hrs de actividad para generar constancia\r\n-\r\n-\t\t\tList<Voluntario> listaVoluntarioModulo = voluntarioService.findVoluntarioOfModulo(id);\r\n-\r\n-\t\t\tmodel.addAttribute(\"modulo\", moduloService.findById(id));\r\n- \t\t\tmodel.addAttribute(\"listaVoluntario\",listaVoluntarioModulo );\r\n-\r\n-\t\t\tSystem.out.println( Mensajes.success(\"MODULO\", \"BUSQUEDA\"));\r\n-\t\t\tmodel.addAttribute(\"mensaje\",  Mensajes.success(\"MODULO\", \"BUSQUEDA\"));\r\n-\t\t\t\r\n-\t\t\treturn \"InfoModulo\";\r\n-\t\t\t\r\n-\t\t} catch (Exception e) {\r\n-\t\t\tSystem.out.println(Mensajes.error(\"MODULO\", \"BUSQUEDA\").concat(e.toString()));\r\n-\r\n-\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.error(\"MODULO\", \"BUSQUEDA\").concat(e.toString()) );\r\n-\t\t}\r\n-\t\treturn \"redirect:/dashboard_modulo\";\r\n-\t}\r\n-\t@GetMapping(\"/addActividadToModulo/{actividadId}\")\r\n-\tpublic String agregarActividad(@PathVariable Long actividadId , @RequestParam Long moduloId ,Model model){\r\n-\t\t\r\n-\t\tModulo modulo = moduloService.findById(moduloId);\t\t\r\n-\t\tActividad actividad = actividadService.findById(actividadId);\r\n-\t\tList<Actividad> ListActividad = modulo.getActividad();\r\n-\r\n-\t\tif (!ListActividad.contains(actividad) ) {\r\n-\t\t\tactividad.setIdModuloActividad(moduloId);\r\n-\t\t\tList<Long> lstaVoluntariosModulo =  voluntarioService.findVoluntarioOfModulo(moduloId).stream().map(Voluntario::getId).toList();\r\n-\r\n-\t\t\tparticipanteService.saveVoluntariosToActividad(lstaVoluntariosModulo,actividadId,Modalidades.ID_MODULO,false);\r\n-\t\t\tactividadService.saveActividad(actividad);\r\n-\r\n-\t\t\tListActividad.add(actividad);\r\n-\t\t\tmodulo.setActividad(ListActividad );\r\n-\r\n-\t\t}\r\n-\t\tmodel.addAttribute(\"modulo\", modulo);\r\n-\t\tmodel.addAttribute(\"listaActividades\",actividadService.findActivosSinModulo());\r\n-\r\n-\t\treturn \"FormNewModulo\";\r\n-\t}\r\n-\t@GetMapping(\"/deleteActividadToModulo/{actividadId}\")\r\n-\tpublic String quitarActividad(@PathVariable Long actividadId , @RequestParam Long moduloId ,Model model){\r\n-\t\t\r\n-\t\tModulo modulo = moduloService.findById(moduloId);\t\t\r\n-\t\tActividad actividad = actividadService.findById(actividadId);\r\n-\r\n-\t\tList<Actividad> ListActividad = modulo.getActividad();\t\r\n-\t\tif (ListActividad.contains(actividad) ) {\r\n-\t\t\tactividad.setIdModuloActividad(null);\r\n-\t\t\tactividadService.saveActividad(actividad);\r\n-\t\t\t\r\n-\t\t\tListActividad.remove(actividad);\r\n-\t\t\tmodulo.setActividad(ListActividad );\r\n-\t\t\tmodel.addAttribute(\"modulo\", modulo);\r\n-\t\t\tmodel.addAttribute(\"listaActividades\",actividadService.findActivosSinModulo());\r\n-\r\n-\t\t}else {\r\n-\t\t\tmodel.addAttribute(\"modulo\", modulo);\r\n-\t\t\tmodel.addAttribute(\"listaActividades\",actividadService.findActivosSinModulo());\r\n-\t\t\t\r\n-\t\t}\r\n-\t\treturn \"FormNewModulo\";\r\n-\t}\r\n-\t@PostMapping(\"/guardar_modulo\")\r\n-\tpublic String guardar_modulo(@ModelAttribute Modulo modulo,Model model) {\r\n-\t\r\n-\t\ttry {\r\n-\t\t\tmoduloService.saveModulo(modulo);\r\n-\t\t\tSystem.out.println( Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n-\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n-\t\t} catch (Exception e) {\r\n-\t\t\tSystem.out.println( Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()) );\r\n-\t\t\tmodel.addAttribute(\"mensaje\",Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()) );\r\n-\t\t}\r\n-\t\treturn \"redirect:/dashboard_modulo\";\r\n-\t}\r\n-\t@GetMapping(\"/regresar_dashboard/{id}\")\r\n-\tpublic String regresar_dashboard(@PathVariable(\"id\") Long id,Model model) {\r\n-\t\r\n-\t\ttry {\r\n-\t\t\tModulo modulo = moduloService.findById(id);\t\t\r\n-\t\t\tif (\t\r\n-\t\t\t\t\tmodulo.getNombre()== null &&\r\n-\t\t\t\t\tmodulo.getActividad().size() == 0\r\n-\t\t\t\t\t) {\t\t\t\t\r\n-\t\t\t\tmoduloService.deleteModulo(modulo);\r\n-\t\t\t\tSystem.out.println(Mensajes.error(\"MODULO\", \"ELIMINACION\"));\r\n-\t\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.error(\"MODULO\", \"ELIMINACION\"));\r\n-\t\t\t}\r\n-\t\t\t\r\n-\t\t\t\r\n-\t\t\t\r\n-\t\t} catch (Exception e) {\r\n-\t\t\tSystem.out.println( Mensajes.error(\"MODULO\", \"ELIMINACION\").concat(e.toString()) );\r\n-\r\n-\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.error(\"MODULO\", \"ELIMINACION\").concat(e.toString()) );\r\n-\t\t}\r\n-\t\t\r\n-\t\treturn \"redirect:/dashboard_modulo\";\r\n-\t}\r\n-\t@GetMapping(\"/retirarActividadFromModulo/{actividadId}\")\r\n-\tpublic String retirarActividadFromModulo(@PathVariable Long actividadId , @RequestParam Long moduloId , Model model, HttpServletRequest request){\r\n-\t\tString pagina_anterior = request.getHeader(\"referer\");\r\n-\t\ttry {\r\n-\t\t\tModulo modulo = moduloService.findById(moduloId);\r\n-\t\t\tActividad actividad = actividadService.findById(actividadId);\r\n-\r\n-\r\n-\t\t\tList<Participante> lstaParticipantesFromActividad  = participanteService.findParticipantesFromActividad(actividadId);\r\n-\r\n-\r\n-\t\t\tparticipanteService.deleteListOfParticipante(lstaParticipantesFromActividad.stream().filter(participante -> participante.getIdTipoParticipacion() == Modalidades.ID_MODULO).collect(Collectors.toList()));\r\n-\r\n-\t\t\tactividad.setModulo(null);\r\n-\t\t\tactividadService.saveActividad(actividad);\r\n-\t\t\tmodulo.getActividad().remove(actividad);\r\n-\t\t\tmoduloService.saveModulo(modulo);\r\n-\r\n-\t\t} catch (Exception e) {\r\n-\t\t\tSystem.out.println(Mensajes.error(\"Actividad from Modulo\", \"ELIMINACION\").concat(e.toString()));\r\n-\t\t\tmodel.addAttribute(\"mensaje\" , Mensajes.error(\"Actividad from Modulo\" , \"ELIMINACION\").concat(e.toString()));\r\n-\r\n-\t\t}\r\n-\t\treturn \"redirect:\"+pagina_anterior;\r\n-\t}\r\n-\t@GetMapping(\"/removeVoluntarioFromModulo/{voluntarioId}\")\r\n-\tpublic String removeVoluntarioFromModulo(\r\n-\t\t\t@PathVariable Long voluntarioId ,\r\n-\t\t\t@RequestParam Long moduloId ,\r\n-\t\t\tModel model,\r\n-\t\t\tHttpServletRequest request){\r\n-\t\tSystem.out.println(\"Volutnario id :\" + voluntarioId);\r\n-\t\tSystem.out.println(\"Modulo id :\" + moduloId);\r\n-\t\tString pagina_anterior = request.getHeader(\"referer\");\r\n-\t\tModulo modulo = moduloService.findById(moduloId);\r\n-\t\tList<Actividad> listActividadFromModulo = modulo.getActividad();\r\n-\t\tSystem.out.println(\"ITERACION ACTIVIDADES DEL MODULO INICIO\");\r\n-\t\tfor (Actividad actividad: listActividadFromModulo ) {\r\n-\t\t\tParticipante participante = participanteService.findParticipantefromVoluntarioYActividad(voluntarioId,actividad.getId());\r\n-\t\t\tparticipanteService.deleteParticipante(participante);\r\n-\t\t\tSystem.out.println(\"Elminacion de actividad\");\r\n-\r\n-\t\t}\r\n-\t\tSystem.out.println(\"ITERACION ACTIVIDADES DEL MODULO FIN\");\r\n-\t\treturn \"redirect:\"+pagina_anterior;\r\n-\t}\r\n-\r\n-\r\n-\t@PostMapping(\"/generar_constancias_modulo/{id}\")\r\n-\tpublic String generar_constancias_modulo(\r\n-\t\t\t@PathVariable(\"id\") Long idModulo,\r\n-\t\t\t@RequestParam(\"pathFile\") String path,\r\n-\t\t\tHttpServletRequest request,\r\n-\t\t\tModel model) {\r\n-\t\ttry {\r\n-\t\t\tModulo modulo = moduloService.findById(idModulo);\r\n-\t\t\tpath = ubicacionConstanciasService.validarPath(path,modulo);\r\n-\t\t\tList<StatusVoluntarioModulo> lstaVoluntario = voluntarioService.getVoluntarioFromModuloHoursOkAndIsParticipant(modulo);\r\n- \t\t\tList<PlantillaModuloDto> listPlantillaDto = PlantillaParser.listStatusVoluntarioToPlantillaDtoModulo(lstaVoluntario,modulo);\r\n-\t\t\tfor (PlantillaModuloDto plantillaDto : listPlantillaDto) {\r\n-\r\n-\t\t\t\tPlantillas.convertirHTMLaPDF(\r\n-\t\t\t\t\t\tPlantillas.GenerarPlantillaModulo(plantillaDto),\r\n-\t\t\t\t\t\tpath + \"/\" + plantillaDto.getStatusVoluntarioModulo().getVoluntario().getDni()+ \".pdf\");\r\n-\t\t\t}\r\n-\t\t\tSystem.out.println(Mensajes.success(\"Archivo\", \"Generacion\"));\r\n-\t\t}catch (Exception e) {\r\n-\t\t\tSystem.out.println(Mensajes.error(\"Archivo\", \"Generacion\").concat(e.toString()));\r\n-\t\t}\r\n-\t\treturn \"redirect:/dashboard_modulo\";\r\n-\t}\r\n-\r\n-\t@GetMapping(\"/ver_estatus_voluntarios/{id}\")\r\n-\tpublic String ver_estatus_voluntarios(\r\n-\t\t\t@PathVariable(\"id\") Long idModulo,\r\n-\t\t\tHttpServletRequest request,\r\n-\t\t\tModel model\r\n-\t){\r\n-\t\ttry {\r\n-\t\t\tModulo modulo = moduloService.findById(idModulo);\r\n-\r\n-\t\t\tSystem.out.println(\"Inicio de verificacion de horas\");\r\n-\t\t\tList<StatusVoluntarioModulo> lstResponse = voluntarioService.getVoluntarioFromModuloHoursOkAndIsParticipant(modulo);\r\n-\r\n-\t\t\tSystem.out.println(lstResponse.toString());\r\n-\t\t\tmodel.addAttribute(\"lstResponse\",lstResponse);\r\n-\t\t\tmodel.addAttribute(\"modulo\",modulo);\r\n-\r\n-\t\t\tSystem.out.println(\"Fin de verificacion de horas\");\r\n-\r\n-\t\t\treturn \"EstatusModulo\";\r\n-\t\t}catch (Exception e){\r\n-\t\t\tSystem.out.println(Mensajes.error(\"Status\", \"Generacion\").concat(e.toString()));\r\n-\t\t\treturn Tools.paginaAnterior(request);\r\n-\r\n-\t\t}\r\n-\r\n-\t}\r\n-\r\n-\t@GetMapping(\"/convertir_modulo/{id}\")\r\n-\tpublic String convertir_modulo(\r\n-\t\t\tHttpServletRequest  request,\r\n-\t\t\t@PathVariable(\"id\") Long idParticipante,\r\n-\t\t\tModel model){\r\n-\t\ttry {\r\n-\t\t\tParticipante participante = participanteService.findById(idParticipante);\r\n-\t\t\tLong idModulo = participante.getActividad().getIdModuloActividad();\r\n-\t\t\tModulo modulo = moduloService.findById(idModulo);\r\n-\t\t\tif ( modulo != null ){\r\n-\t\t\t\t//Aca estan las actividades que participo de manera \"libre\"\r\n-\t\t\t\tList<Participante> lstActividadesParticipadas = participanteService.obtenerParticipacionAsociadasByModuloId(participante.getIdVoluntario(),idModulo);\r\n-\r\n-\t\t\t\t//Se busca primero cambiar el tipo de participacion a modulo\r\n-\t\t\t\tfor (Participante p :\r\n-\t\t\t\t\t lstActividadesParticipadas) {\r\n-\t\t\t\t\tp.setIdTipoParticipacion(Modalidades.ID_MODULO);\r\n-\t\t\t\t\tparticipanteService.saveParticipante(p);\r\n-\t\t\t\t}\r\n-\r\n-\t\t\t\tList<Actividad> lstActividadesFaltantes =\r\n-\t\t\t\t\tactividadService.recuperarFaltantes(\r\n-\t\t\t\t\t\tactividadService.obtenerActividesFromParticipaciones(\r\n-\t\t\t\t\t\t\tlstActividadesParticipadas),\r\n-\t\t\t\t\t\tmodulo.getActividad());\r\n-\r\n-\t\t\t\tfor (Actividad actividad:\r\n-\t\t\t\t\tlstActividadesFaltantes) {\r\n-\r\n-\t\t\t\t\tparticipanteService.saveParticipante(\r\n-\t\t\t\t\t\t\tParticipante.builder()\r\n-\t\t\t\t\t\t\t\t\t.isParticipant(Boolean.FALSE)\r\n-\t\t\t\t\t\t\t\t\t.idActividad(actividad.getId())\r\n-\t\t\t\t\t\t\t\t\t.idVoluntario(participante.getIdVoluntario())\r\n-\t\t\t\t\t\t\t\t\t.idTipoParticipacion(Modalidades.ID_MODULO)\r\n-\t\t\t\t\t\t\t\t\t.build()\r\n-\t\t\t\t\t);\r\n-\r\n-\t\t\t\t}\r\n-\t\t\t\tSystem.out.println(\"Se asocio el voluntario al modulo :\"+ modulo.toString());\r\n-\t\t\t}else {\r\n-\t\t\t\tSystem.out.println(\"La actividad no esta asociada a un modulo\");\r\n- \t\t\t}\r\n-\t\t\treturn Tools.paginaAnterior(request);\r\n-\r\n-\t\t}catch (Exception e){\r\n-\t\t\tSystem.out.println(Mensajes.error(\"Error al convertir tipo de participacion a modulo\").concat(e.toString()));\r\n-\t\t\treturn Tools.paginaAnterior(request);\r\n-\t\t}\r\n-\t}\r\n-\r\n-\r\n-\r\n-}\r\n"
                },
                {
                    "date": 1717174986473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -364,9 +364,9 @@\n \t\t\t\t\t\t\tParticipante.builder()\r\n \t\t\t\t\t\t\t\t\t.isParticipant(Boolean.FALSE)\r\n \t\t\t\t\t\t\t\t\t.idActividad(actividad.getId())\r\n \t\t\t\t\t\t\t\t\t.idVoluntario(participante.getIdVoluntario())\r\n-\t\t\t\t\t\t\t\t\t.idTipoParticipacion(Modalidades.ID_MODULO)\r\n+\t\t\t\t\t\t\t\t\t.idTipoParticipacion(Modalidades.LIBRE)\r\n \t\t\t\t\t\t\t\t\t.build()\r\n \t\t\t\t\t);\r\n \r\n \t\t\t\t}\r\n"
                },
                {
                    "date": 1717175020162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -369,9 +369,9 @@\n \t\t\t\t\t\t\t\t\t.build()\r\n \t\t\t\t\t);\r\n \r\n \t\t\t\t}\r\n-\t\t\t\tSystem.out.println(\"Se asocio el voluntario al modulo :\"+ modulo.toString());\r\n+\t\t\t\tSystem.out.println(\"Se desasocio el voluntario al modulo :\"+ modulo.toString());\r\n \t\t\t}else {\r\n \t\t\t\tSystem.out.println(\"La actividad no esta asociada a un modulo\");\r\n \t\t\t}\r\n \t\t\treturn Tools.paginaAnterior(request);\r\n"
                },
                {
                    "date": 1717175025663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -369,9 +369,9 @@\n \t\t\t\t\t\t\t\t\t.build()\r\n \t\t\t\t\t);\r\n \r\n \t\t\t\t}\r\n-\t\t\t\tSystem.out.println(\"Se desasocio el voluntario al modulo :\"+ modulo.toString());\r\n+\t\t\t\tSystem.out.println(\"Se desasocio el voluntario del modulo :\"+ modulo.toString());\r\n \t\t\t}else {\r\n \t\t\t\tSystem.out.println(\"La actividad no esta asociada a un modulo\");\r\n \t\t\t}\r\n \t\t\treturn Tools.paginaAnterior(request);\r\n"
                }
            ],
            "date": 1717174511008,
            "name": "Commit-0",
            "content": "package com.sebasgoy.controller;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\nimport com.sebasgoy.Parser.PlantillaParser;\r\nimport com.sebasgoy.constantes.Modalidades;\r\nimport com.sebasgoy.constantes.Plantillas;\r\nimport com.sebasgoy.dto.Participante;\r\nimport com.sebasgoy.dto.Voluntario;\r\nimport com.sebasgoy.dto.request.PlantillaModuloDto;\r\nimport com.sebasgoy.dto.response.StatusVoluntarioModulo;\r\nimport com.sebasgoy.service.*;\r\nimport com.sebasgoy.util.Tools;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport com.sebasgoy.dto.Actividad;\r\nimport com.sebasgoy.dto.Modulo;\r\nimport com.sebasgoy.constantes.Mensajes;\r\n \r\n@Controller\r\n@AllArgsConstructor\r\npublic class ModuloController {\r\n\r\n\tprivate final ModuloService moduloService;\r\n\tprivate final ActividadService actividadService;\r\n\tprivate final VoluntarioService voluntarioService;\r\n\tprivate final ParticipanteService participanteService;\r\n\tprivate final UbicacionConstanciasService ubicacionConstanciasService;\r\n\t@GetMapping(\"/dashboard_modulo\")\r\n\tpublic String cargarDashboardModulo(Model model) {\r\n\t\tmodel.addAttribute(\"listaModulo\", moduloService.findActivos() );\r\n\t\treturn \"DashboardModulo\";\r\n\t}\r\n\t\r\n\t@GetMapping(\"/generar_modulo\")\r\n\tpublic String cargarCrudModulo(Model model) {\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tModulo modulo = Modulo.builder().id(moduloService.UltimoId()).build();\r\n\t\t\tmoduloService.saveModulo(modulo);\r\n\r\n\t\t\tmodel.addAttribute(\"listaActividades\",actividadService.findActivosSinModulo());\r\n\t\t\tmodel.addAttribute(\"modulo\", modulo);\r\n\t\t\tSystem.out.println(Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n\t\t\tmodel.addAttribute(\"mensaje\",Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n\t\t} catch (Exception e) {\r\n\t\t\tSystem.out.println(Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()));\r\n\r\n\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()) );\r\n\t\t}\r\n\t\treturn \"FormNewModulo\";\r\n\t}\r\n\t\r\n\t@GetMapping(\"/editar_modulo/{id}\")\r\n\tpublic String cargarCrudModulo(@PathVariable(\"id\") Long id,Model model) {\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tModulo modulo = moduloService.findById(id) ;\r\n\r\n\t\t\tmodel.addAttribute(\"listaActividades\",actividadService.findActivosSinModulo());\r\n\t\t\tmodel.addAttribute(\"modulo\", modulo);\r\n\t\t\tSystem.out.println( Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n\t\t} catch (Exception e) {\r\n\t\t\tSystem.out.println(Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()));\r\n\r\n\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()) );\r\n\t\t}\r\n\t\treturn \"FormNewModulo\";\r\n\t}\r\n\t\r\n\t@GetMapping(\"/info_modulo/{id}\")\r\n\tpublic String infoModulo(@PathVariable(\"id\") Long id,Model model) {\r\n\t\t\r\n\t\ttry {\r\n\t\t\t//Logica :\r\n\t\t\t// En el modulo todas las actividades deberian tener los mismo volutnarios\r\n\t\t\t//pero se generan las tablas participaciones en la actividad para contabilizar su participacion\r\n\t\t\t// segun regla de negocio , deberian tener como minimo 6 actividades o 36hrs de actividad para generar constancia\r\n\r\n\t\t\tList<Voluntario> listaVoluntarioModulo = voluntarioService.findVoluntarioOfModulo(id);\r\n\r\n\t\t\tmodel.addAttribute(\"modulo\", moduloService.findById(id));\r\n \t\t\tmodel.addAttribute(\"listaVoluntario\",listaVoluntarioModulo );\r\n\r\n\t\t\tSystem.out.println( Mensajes.success(\"MODULO\", \"BUSQUEDA\"));\r\n\t\t\tmodel.addAttribute(\"mensaje\",  Mensajes.success(\"MODULO\", \"BUSQUEDA\"));\r\n\t\t\t\r\n\t\t\treturn \"InfoModulo\";\r\n\t\t\t\r\n\t\t} catch (Exception e) {\r\n\t\t\tSystem.out.println(Mensajes.error(\"MODULO\", \"BUSQUEDA\").concat(e.toString()));\r\n\r\n\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.error(\"MODULO\", \"BUSQUEDA\").concat(e.toString()) );\r\n\t\t}\r\n\t\treturn \"redirect:/dashboard_modulo\";\r\n\t}\r\n\t@GetMapping(\"/addActividadToModulo/{actividadId}\")\r\n\tpublic String agregarActividad(@PathVariable Long actividadId , @RequestParam Long moduloId ,Model model){\r\n\t\t\r\n\t\tModulo modulo = moduloService.findById(moduloId);\t\t\r\n\t\tActividad actividad = actividadService.findById(actividadId);\r\n\t\tList<Actividad> ListActividad = modulo.getActividad();\r\n\r\n\t\tif (!ListActividad.contains(actividad) ) {\r\n\t\t\tactividad.setIdModuloActividad(moduloId);\r\n\t\t\tList<Long> lstaVoluntariosModulo =  voluntarioService.findVoluntarioOfModulo(moduloId).stream().map(Voluntario::getId).toList();\r\n\r\n\t\t\tparticipanteService.saveVoluntariosToActividad(lstaVoluntariosModulo,actividadId,Modalidades.ID_MODULO,false);\r\n\t\t\tactividadService.saveActividad(actividad);\r\n\r\n\t\t\tListActividad.add(actividad);\r\n\t\t\tmodulo.setActividad(ListActividad );\r\n\r\n\t\t}\r\n\t\tmodel.addAttribute(\"modulo\", modulo);\r\n\t\tmodel.addAttribute(\"listaActividades\",actividadService.findActivosSinModulo());\r\n\r\n\t\treturn \"FormNewModulo\";\r\n\t}\r\n\t@GetMapping(\"/deleteActividadToModulo/{actividadId}\")\r\n\tpublic String quitarActividad(@PathVariable Long actividadId , @RequestParam Long moduloId ,Model model){\r\n\t\t\r\n\t\tModulo modulo = moduloService.findById(moduloId);\t\t\r\n\t\tActividad actividad = actividadService.findById(actividadId);\r\n\r\n\t\tList<Actividad> ListActividad = modulo.getActividad();\t\r\n\t\tif (ListActividad.contains(actividad) ) {\r\n\t\t\tactividad.setIdModuloActividad(null);\r\n\t\t\tactividadService.saveActividad(actividad);\r\n\t\t\t\r\n\t\t\tListActividad.remove(actividad);\r\n\t\t\tmodulo.setActividad(ListActividad );\r\n\t\t\tmodel.addAttribute(\"modulo\", modulo);\r\n\t\t\tmodel.addAttribute(\"listaActividades\",actividadService.findActivosSinModulo());\r\n\r\n\t\t}else {\r\n\t\t\tmodel.addAttribute(\"modulo\", modulo);\r\n\t\t\tmodel.addAttribute(\"listaActividades\",actividadService.findActivosSinModulo());\r\n\t\t\t\r\n\t\t}\r\n\t\treturn \"FormNewModulo\";\r\n\t}\r\n\t@PostMapping(\"/guardar_modulo\")\r\n\tpublic String guardar_modulo(@ModelAttribute Modulo modulo,Model model) {\r\n\t\r\n\t\ttry {\r\n\t\t\tmoduloService.saveModulo(modulo);\r\n\t\t\tSystem.out.println( Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.success(\"MODULO\", \"REGISTRO\"));\r\n\t\t} catch (Exception e) {\r\n\t\t\tSystem.out.println( Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()) );\r\n\t\t\tmodel.addAttribute(\"mensaje\",Mensajes.error(\"MODULO\", \"REGISTRO\").concat(e.toString()) );\r\n\t\t}\r\n\t\treturn \"redirect:/dashboard_modulo\";\r\n\t}\r\n\t@GetMapping(\"/regresar_dashboard/{id}\")\r\n\tpublic String regresar_dashboard(@PathVariable(\"id\") Long id,Model model) {\r\n\t\r\n\t\ttry {\r\n\t\t\tModulo modulo = moduloService.findById(id);\t\t\r\n\t\t\tif (\t\r\n\t\t\t\t\tmodulo.getNombre()== null &&\r\n\t\t\t\t\tmodulo.getActividad().size() == 0\r\n\t\t\t\t\t) {\t\t\t\t\r\n\t\t\t\tmoduloService.deleteModulo(modulo);\r\n\t\t\t\tSystem.out.println(Mensajes.error(\"MODULO\", \"ELIMINACION\"));\r\n\t\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.error(\"MODULO\", \"ELIMINACION\"));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t} catch (Exception e) {\r\n\t\t\tSystem.out.println( Mensajes.error(\"MODULO\", \"ELIMINACION\").concat(e.toString()) );\r\n\r\n\t\t\tmodel.addAttribute(\"mensaje\", Mensajes.error(\"MODULO\", \"ELIMINACION\").concat(e.toString()) );\r\n\t\t}\r\n\t\t\r\n\t\treturn \"redirect:/dashboard_modulo\";\r\n\t}\r\n\t@GetMapping(\"/retirarActividadFromModulo/{actividadId}\")\r\n\tpublic String retirarActividadFromModulo(@PathVariable Long actividadId , @RequestParam Long moduloId , Model model, HttpServletRequest request){\r\n\t\tString pagina_anterior = request.getHeader(\"referer\");\r\n\t\ttry {\r\n\t\t\tModulo modulo = moduloService.findById(moduloId);\r\n\t\t\tActividad actividad = actividadService.findById(actividadId);\r\n\r\n\r\n\t\t\tList<Participante> lstaParticipantesFromActividad  = participanteService.findParticipantesFromActividad(actividadId);\r\n\r\n\r\n\t\t\tparticipanteService.deleteListOfParticipante(lstaParticipantesFromActividad.stream().filter(participante -> participante.getIdTipoParticipacion() == Modalidades.ID_MODULO).collect(Collectors.toList()));\r\n\r\n\t\t\tactividad.setModulo(null);\r\n\t\t\tactividadService.saveActividad(actividad);\r\n\t\t\tmodulo.getActividad().remove(actividad);\r\n\t\t\tmoduloService.saveModulo(modulo);\r\n\r\n\t\t} catch (Exception e) {\r\n\t\t\tSystem.out.println(Mensajes.error(\"Actividad from Modulo\", \"ELIMINACION\").concat(e.toString()));\r\n\t\t\tmodel.addAttribute(\"mensaje\" , Mensajes.error(\"Actividad from Modulo\" , \"ELIMINACION\").concat(e.toString()));\r\n\r\n\t\t}\r\n\t\treturn \"redirect:\"+pagina_anterior;\r\n\t}\r\n\t@GetMapping(\"/removeVoluntarioFromModulo/{voluntarioId}\")\r\n\tpublic String removeVoluntarioFromModulo(\r\n\t\t\t@PathVariable Long voluntarioId ,\r\n\t\t\t@RequestParam Long moduloId ,\r\n\t\t\tModel model,\r\n\t\t\tHttpServletRequest request){\r\n\t\tSystem.out.println(\"Volutnario id :\" + voluntarioId);\r\n\t\tSystem.out.println(\"Modulo id :\" + moduloId);\r\n\t\tString pagina_anterior = request.getHeader(\"referer\");\r\n\t\tModulo modulo = moduloService.findById(moduloId);\r\n\t\tList<Actividad> listActividadFromModulo = modulo.getActividad();\r\n\t\tSystem.out.println(\"ITERACION ACTIVIDADES DEL MODULO INICIO\");\r\n\t\tfor (Actividad actividad: listActividadFromModulo ) {\r\n\t\t\tParticipante participante = participanteService.findParticipantefromVoluntarioYActividad(voluntarioId,actividad.getId());\r\n\t\t\tparticipanteService.deleteParticipante(participante);\r\n\t\t\tSystem.out.println(\"Elminacion de actividad\");\r\n\r\n\t\t}\r\n\t\tSystem.out.println(\"ITERACION ACTIVIDADES DEL MODULO FIN\");\r\n\t\treturn \"redirect:\"+pagina_anterior;\r\n\t}\r\n\r\n\r\n\t@PostMapping(\"/generar_constancias_modulo/{id}\")\r\n\tpublic String generar_constancias_modulo(\r\n\t\t\t@PathVariable(\"id\") Long idModulo,\r\n\t\t\t@RequestParam(\"pathFile\") String path,\r\n\t\t\tHttpServletRequest request,\r\n\t\t\tModel model) {\r\n\t\ttry {\r\n\t\t\tModulo modulo = moduloService.findById(idModulo);\r\n\t\t\tpath = ubicacionConstanciasService.validarPath(path,modulo);\r\n\t\t\tList<StatusVoluntarioModulo> lstaVoluntario = voluntarioService.getVoluntarioFromModuloHoursOkAndIsParticipant(modulo);\r\n \t\t\tList<PlantillaModuloDto> listPlantillaDto = PlantillaParser.listStatusVoluntarioToPlantillaDtoModulo(lstaVoluntario,modulo);\r\n\t\t\tfor (PlantillaModuloDto plantillaDto : listPlantillaDto) {\r\n\r\n\t\t\t\tPlantillas.convertirHTMLaPDF(\r\n\t\t\t\t\t\tPlantillas.GenerarPlantillaModulo(plantillaDto),\r\n\t\t\t\t\t\tpath + \"/\" + plantillaDto.getStatusVoluntarioModulo().getVoluntario().getDni()+ \".pdf\");\r\n\t\t\t}\r\n\t\t\tSystem.out.println(Mensajes.success(\"Archivo\", \"Generacion\"));\r\n\t\t}catch (Exception e) {\r\n\t\t\tSystem.out.println(Mensajes.error(\"Archivo\", \"Generacion\").concat(e.toString()));\r\n\t\t}\r\n\t\treturn \"redirect:/dashboard_modulo\";\r\n\t}\r\n\r\n\t@GetMapping(\"/ver_estatus_voluntarios/{id}\")\r\n\tpublic String ver_estatus_voluntarios(\r\n\t\t\t@PathVariable(\"id\") Long idModulo,\r\n\t\t\tHttpServletRequest request,\r\n\t\t\tModel model\r\n\t){\r\n\t\ttry {\r\n\t\t\tModulo modulo = moduloService.findById(idModulo);\r\n\r\n\t\t\tSystem.out.println(\"Inicio de verificacion de horas\");\r\n\t\t\tList<StatusVoluntarioModulo> lstResponse = voluntarioService.getVoluntarioFromModuloHoursOkAndIsParticipant(modulo);\r\n\r\n\t\t\tSystem.out.println(lstResponse.toString());\r\n\t\t\tmodel.addAttribute(\"lstResponse\",lstResponse);\r\n\t\t\tmodel.addAttribute(\"modulo\",modulo);\r\n\r\n\t\t\tSystem.out.println(\"Fin de verificacion de horas\");\r\n\r\n\t\t\treturn \"EstatusModulo\";\r\n\t\t}catch (Exception e){\r\n\t\t\tSystem.out.println(Mensajes.error(\"Status\", \"Generacion\").concat(e.toString()));\r\n\t\t\treturn Tools.paginaAnterior(request);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t@GetMapping(\"/convertir_modulo/{id}\")\r\n\tpublic String convertir_modulo(\r\n\t\t\tHttpServletRequest  request,\r\n\t\t\t@PathVariable(\"id\") Long idParticipante,\r\n\t\t\tModel model){\r\n\t\ttry {\r\n\t\t\tParticipante participante = participanteService.findById(idParticipante);\r\n\t\t\tLong idModulo = participante.getActividad().getIdModuloActividad();\r\n\t\t\tModulo modulo = moduloService.findById(idModulo);\r\n\t\t\tif ( modulo != null ){\r\n\t\t\t\t//Aca estan las actividades que participo de manera \"libre\"\r\n\t\t\t\tList<Participante> lstActividadesParticipadas = participanteService.obtenerParticipacionAsociadasByModuloId(participante.getIdVoluntario(),idModulo);\r\n\r\n\t\t\t\t//Se busca primero cambiar el tipo de participacion a modulo\r\n\t\t\t\tfor (Participante p :\r\n\t\t\t\t\t lstActividadesParticipadas) {\r\n\t\t\t\t\tp.setIdTipoParticipacion(Modalidades.ID_MODULO);\r\n\t\t\t\t\tparticipanteService.saveParticipante(p);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tList<Actividad> lstActividadesFaltantes =\r\n\t\t\t\t\tactividadService.recuperarFaltantes(\r\n\t\t\t\t\t\tactividadService.obtenerActividesFromParticipaciones(\r\n\t\t\t\t\t\t\tlstActividadesParticipadas),\r\n\t\t\t\t\t\tmodulo.getActividad());\r\n\r\n\t\t\t\tfor (Actividad actividad:\r\n\t\t\t\t\tlstActividadesFaltantes) {\r\n\r\n\t\t\t\t\tparticipanteService.saveParticipante(\r\n\t\t\t\t\t\t\tParticipante.builder()\r\n\t\t\t\t\t\t\t\t\t.isParticipant(Boolean.FALSE)\r\n\t\t\t\t\t\t\t\t\t.idActividad(actividad.getId())\r\n\t\t\t\t\t\t\t\t\t.idVoluntario(participante.getIdVoluntario())\r\n\t\t\t\t\t\t\t\t\t.idTipoParticipacion(Modalidades.ID_MODULO)\r\n\t\t\t\t\t\t\t\t\t.build()\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.println(\"Se asocio el voluntario al modulo :\"+ modulo.toString());\r\n\t\t\t}else {\r\n\t\t\t\tSystem.out.println(\"La actividad no esta asociada a un modulo\");\r\n \t\t\t}\r\n\t\t\treturn Tools.paginaAnterior(request);\r\n\r\n\t\t}catch (Exception e){\r\n\t\t\tSystem.out.println(Mensajes.error(\"Error al convertir tipo de participacion a modulo\").concat(e.toString()));\r\n\t\t\treturn Tools.paginaAnterior(request);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n}\r\n"
        }
    ]
}