{
    "sourceFile": "src/main/java/com/sebasgoy/dto/Mapper/ExcelMapper.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1720927876727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1720927876727,
            "name": "Commit-0",
            "content": "package com.sebasgoy.dto.Mapper;\r\n\r\nimport com.sebasgoy.dto.Voluntario;\r\nimport com.sebasgoy.dto.response.VoluntarioResponse;\r\nimport com.sebasgoy.constantes.ValoresPersonaRegex;\r\nimport org.apache.poi.ss.usermodel.Row;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.web.multipart.MultipartFile;\r\nimport java.io.IOException;\r\nimport java.time.LocalDateTime;\r\nimport java.util.*;\r\nimport static com.sebasgoy.util.Tools.*;\r\n\r\n@Component\r\npublic class ExcelMapper {\r\n\r\n    public static <T> T DevolverEntidadFromExcel(MultipartFile archivoExcel,Class<T> clase)  {\r\n        if (clase.equals(VoluntarioResponse.class)) {\r\n            System.out.println(\"devolviendo  Voluntario Response\");\r\n            return clase.cast(leerExcelOfVoluntarios(archivoExcel));\r\n        } else {\r\n            throw new IllegalArgumentException(\"Tipo de clase no admitido para mapear desde el archivo Excel.\");\r\n        }\r\n    }\r\n\r\n\r\n    private static VoluntarioResponse leerExcelOfVoluntarios(MultipartFile archivoExcel) {\r\n        List<Voluntario> listaValidos = new ArrayList<>();\r\n        List<Voluntario> listaInvalidos = new ArrayList<>();\r\n        try {\r\n            Iterator<Row> filas = getRowIterator(archivoExcel);\r\n            filas.next(); // Salta la primera fila (encabezados)\r\n            while (filas.hasNext()){\r\n                Row fila = filas.next();\r\n                /*Depende de la estructura del Excel\r\n                Estructura de excel :\r\n                // Marca temporal -> 0\r\n                // CORREO         -> 1\r\n                // DNI            -> 2\r\n                // TELEFONO       -> 3\r\n                // NOMBRE         -> 4\r\n                // EDAD:          -> 5\r\n                // Terminos y condiciones - */\r\n                Voluntario voluntario = new Voluntario();\r\n                voluntario.setEstado(true);\r\n                voluntario.setParticipante(new ArrayList<>());\r\n                voluntario.setCorreo(getStringFromCell(fila,1));\r\n                voluntario.setDni(getStringFromCell( fila,2));\r\n                voluntario.setTelefono(getStringFromCell(fila,3));\r\n                voluntario.setNombre(getStringFromCell( fila,4));\r\n                voluntario.setEdad(getStringFromCell( fila,5));\r\n\r\n                if (areVoluntarioFieldsValid(voluntario)) {\r\n                \tSystem.out.println(voluntario);\r\n                    if (ValoresPersonaRegex.isValidVoluntario(voluntario) ){\r\n                        listaValidos.add(voluntario);\r\n                    }else{\r\n                        listaInvalidos.add(voluntario);\r\n                    }\r\n                }\r\n            }\r\n            System.out.println(\"Lectura correcta de Excel\");\r\n        } catch (IOException e) {\r\n            System.out.println(\"Lectura Incorrecta de Excel\" + e);\r\n            throw new RuntimeException(e);\r\n        }\r\n        return VoluntarioResponse.builder()\r\n                .fecha(LocalDateTime.now())\r\n                .listVoluntarioInvalido(listaInvalidos)\r\n                .listVoluntarioValido(listaValidos)\r\n                .totalPersonas( listaValidos.size()+listaInvalidos.size())\r\n                .build();\r\n    }\r\n}\r\n"
        }
    ]
}