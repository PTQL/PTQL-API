{
    "sourceFile": "src/main/java/com/sebasgoy/service/ParticipanteService.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1717176988849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717176994567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,8 @@\n import com.sebasgoy.dto.Voluntario;\r\n import com.sebasgoy.dto.response.AsistenciaRespone;\r\n import com.sebasgoy.dto.response.VoluntarioResponse;\r\n import com.sebasgoy.repository.IParticipanteRepository;\r\n-import com.sebasgoy.repository.IVoluntarioRepository;\r\n import lombok.AllArgsConstructor;\r\n import org.springframework.stereotype.Service;\r\n import org.springframework.ui.Model;\r\n \r\n"
                }
            ],
            "date": 1717176988849,
            "name": "Commit-0",
            "content": "package com.sebasgoy.service;\r\n\r\n\r\nimport com.sebasgoy.constantes.Modalidades;\r\nimport com.sebasgoy.constantes.ValoresPersonaRegex;\r\nimport com.sebasgoy.dto.Actividad;\r\nimport com.sebasgoy.dto.Participante;\r\nimport com.sebasgoy.dto.Voluntario;\r\nimport com.sebasgoy.dto.response.AsistenciaRespone;\r\nimport com.sebasgoy.dto.response.VoluntarioResponse;\r\nimport com.sebasgoy.repository.IParticipanteRepository;\r\nimport com.sebasgoy.repository.IVoluntarioRepository;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.ui.Model;\r\n\r\nimport java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@AllArgsConstructor\r\npublic class ParticipanteService {\r\n\t\r\n    private IParticipanteRepository iParticipanteRepository;\r\n    private ActividadService actividadService;\r\n    private VoluntarioService voluntarioService;\r\n    private TipoParticipacionService tipoParticipacionService;\r\n    public Participante findById(Long id){\r\n        return  iParticipanteRepository.findById(id).orElse(new Participante());\r\n    }\r\n\r\n    public Participante findByDniAndActividad(String dni,Actividad actividad){\r\n        return iParticipanteRepository.findByVoluntario_DniAndActividad(dni, actividad);\r\n    }\r\n    public List<Participante> getAll(){\r\n        return iParticipanteRepository.findAll();\r\n    }\r\n    public void saveParticipante(Participante participante) {\r\n\r\n    \t\r\n        iParticipanteRepository.save(participante);\r\n    }\r\n    \r\n    public void saveVoluntariosToActividad(List<Long> ListIdVoluntarios, Long idActividad,Long idModalidad,Boolean isParticipants ) {\r\n        System.out.println(\"Guardando lista de voluntarios en una actividad\");\r\n        for (Long idVoluntario : ListIdVoluntarios) {\r\n\t\t\tiParticipanteRepository.save(\r\n\t\t\t\t\tParticipante.builder()\r\n\t\t\t\t\t.idActividad(idActividad)\r\n\t\t\t\t\t.idVoluntario(idVoluntario)\r\n\t\t\t\t\t.isParticipant(isParticipants)\r\n\t\t\t\t\t.idTipoParticipacion(idModalidad)\r\n\t\t\t\t\t.build()\r\n\t\t\t);\r\n\t\t}\r\n    }\r\n    \r\n    public List<Participante> saveVoluntariosToActividadAndGetParticipantes(List<Voluntario> ListIdVoluntarios, Long idActividad,Long idModalidad) {\r\n        System.out.println(\"Guardando lista de voluntarios en una actividad\");\r\n        List<Participante> v = new ArrayList<>();\r\n        for (Voluntario voluntario : ListIdVoluntarios) {\r\n\t\t\tv.add( iParticipanteRepository.save(\r\n\t\t\t\t\tParticipante.builder()\r\n\t\t\t\t\t.idActividad(idActividad)\r\n\t\t\t\t\t.idVoluntario(voluntario.getId())\r\n\t\t\t\t\t.isParticipant(false)\r\n\t\t\t\t\t.idTipoParticipacion(idModalidad)\r\n\t\t\t\t\t.build()\r\n\t\t\t));\r\n\t\t}\r\n        return v;\r\n    }\r\n\r\n    public boolean existeParticipanteParaVoluntarioYActividad(Long idVoluntario, Long idActividad) {\r\n        return iParticipanteRepository.findByVoluntarioIdAndActividadIdOptional(idVoluntario, idActividad).isPresent();\r\n    }\r\n\r\n    public Participante findParticipantefromVoluntarioYActividad(Long idVoluntario, Long idActividad) {\r\n        return iParticipanteRepository.findByVoluntarioIdAndActividadIdOptional(idVoluntario, idActividad).orElse(null);\r\n    }\r\n    public Optional<Participante> findParticipantefromVoluntarioYActividadOptional(Long idVoluntario, Long idActividad) {\r\n        return iParticipanteRepository.findByVoluntarioIdAndActividadIdOptional(idVoluntario, idActividad);\r\n    }\r\n    public void deleteParticipante(Participante participante) {\r\n    \tiParticipanteRepository.delete(participante);\r\n    }\r\n    public void deleteParticipanteById(Long id) {\r\n    \tiParticipanteRepository.deleteById(id);\r\n    }\r\n\r\n    public List<Participante> findParticipantesFromActividad(Long idActividad){\r\n        return iParticipanteRepository.findByIdActividad(idActividad);\r\n\r\n    }\r\n\r\n    public List<Participante> getLibresFromListParticipante(Long idActividad){\r\n        List<Participante> listParticipantes = iParticipanteRepository.findByIdActividad(idActividad);\r\n        return listParticipantes.stream().filter( participante -> (participante.getIdTipoParticipacion() == Modalidades.ID_LIBRE)&& (participante.getIsParticipant() == Boolean.TRUE)).collect(Collectors.toList());\r\n\r\n    }\r\n\r\n\r\n\r\n    public void changeParticipacionById(Long id ) {\r\n    \tParticipante participante = iParticipanteRepository.findById(id).get();\r\n    \t\r\n    \tparticipante.changeParticipacion();\r\n    \tiParticipanteRepository.save(participante);\r\n    \t\r\n    }\r\n    \r\n    public void makeParticipantionTrue(List<Participante> lstParticipantes){\r\n    \tlstParticipantes.forEach(\r\n    \t\t\tparticipante -> {\r\n    \t\t\t\tparticipante.setIsParticipant(true);   \t\t\r\n    \t\t\t\tsaveParticipante(participante);\r\n    \t\t\t}\t\r\n    \t\t\t);\r\n\r\n    }\r\n\r\n    public void deleteListOfParticipante(List<Participante> lstaParticipantesFromActividad) {\r\n        System.out.println(\"Eliminando lista de participantes de una actividad\");\r\n        for (Participante participante: lstaParticipantesFromActividad) {\r\n            iParticipanteRepository.delete(participante);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public AsistenciaRespone verDetallesListOfDni(Long idActividad , Model model , String dnis) {\r\n\r\n        System.out.println(\"Iniciando lectura de Txt\");\r\n        Actividad actividad = actividadService.findById(idActividad);\r\n        AsistenciaRespone asistenciaRespone = new AsistenciaRespone();\r\n\r\n\r\n        List<String> listaDni= Arrays.asList(dnis.split(\"\\\\r?\\\\n\"));\r\n\r\n        for (String dni : listaDni) {\r\n            if (dni.trim().matches(ValoresPersonaRegex.DNI)) {\r\n                Participante participante = findByDniAndActividad(dni, actividad);\r\n                if (participante != null) {\r\n                    asistenciaRespone.getLstRegistrados().add(participante);\r\n                } else {\r\n                    Voluntario voluntario = voluntarioService.findByDni(dni);\r\n                    if (voluntario != null) {\r\n                        asistenciaRespone.getLstNoRegistrados().add(voluntario);\r\n                    } else {\r\n                        asistenciaRespone.getLstNoRegistrados().add(Voluntario.builder().estado(true).dni(dni).build());\r\n                    }\r\n                }\r\n            } else {\r\n                asistenciaRespone.getLstDniNoValidos().add(dni);\r\n            }\r\n        }\r\n\r\n        asistenciaRespone.setListDni(getTxtListDni(listaDni));\r\n        return asistenciaRespone;\r\n\r\n\r\n    }\r\n\r\n    public String getTxtListDni(List<String> listDni) {\r\n        if (listDni.size() == 0) {\r\n            return \"\";\r\n        }else {\r\n            StringBuilder sb = new StringBuilder();\r\n            for (String dni : listDni) {\r\n                sb.append(dni).append(\"\\n\");\r\n            }\r\n            return sb.toString();\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public Participante crearParticipante(Long idActividad , Long idVoluntario , String modalidad,Boolean participacion) {\r\n        return Participante.builder()\r\n                .idActividad(idActividad)\r\n                .isParticipant(participacion)\r\n                .idVoluntario(idVoluntario)\r\n                .idTipoParticipacion(tipoParticipacionService.findByDescripcion(modalidad).getId())\r\n                .build();\r\n    }\r\n\r\n\r\n    public List<Participante> obtenerParticipacionAsociadasByModuloId(Long idVoluntario ,Long idModulo){\r\n        //Se busca retornar las activiades de un voluntario que haya participado de manera Libre\r\n        //que esten en un modulo para realizar el cambio de tipo de participacion\r\n\r\n       return  voluntarioService.findById(idVoluntario).getParticipante()\r\n                .stream().filter(\r\n                        participante -> Objects.equals(participante.getActividad().getIdModuloActividad() , idModulo)\r\n               ).toList();\r\n    }\r\n\r\n    public Boolean isValid(VoluntarioResponse voluntarioResponse) {\r\n\r\n        return (voluntarioResponse.getListVoluntarioInvalido().isEmpty()) &&\r\n                (!voluntarioResponse.getListVoluntarioValido().isEmpty());\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n"
        }
    ]
}