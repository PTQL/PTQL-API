{
    "sourceFile": "src/main/java/com/sebasgoy/service/UbicacionConstanciasService.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1717176984161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1717176984161,
            "name": "Commit-0",
            "content": "package com.sebasgoy.service;\r\n\r\nimport java.io.File;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\nimport com.sebasgoy.dto.Modulo;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport com.sebasgoy.dto.Actividad;\r\nimport com.sebasgoy.dto.UbicacionConstancias;\r\nimport com.sebasgoy.repository.IUbicacionRepository;\r\n\r\nimport lombok.AllArgsConstructor;\r\n\r\n@Service\r\n@AllArgsConstructor\r\npublic class UbicacionConstanciasService {\r\n\r\n\tprivate final IUbicacionRepository iUbicacionRepository;\r\n\tprivate final ActividadService actividadService;\r\n\tprivate final ModuloService moduloService;\r\n\r\n\tpublic Long UltimoId() {\r\n\t\tList<UbicacionConstancias> activos = findAll();\r\n\t\t    \r\n\t    if (activos.isEmpty()) {\r\n\t        return 1L;\r\n\t    }\r\n\t     \r\n\t    UbicacionConstancias ultimoElemento = activos.get(activos.size() - 1);\r\n \r\n\t    return ultimoElemento.getId() + 1;\r\n\t}\r\n\t\r\n\t\r\n\tpublic UbicacionConstancias findById(Long id){\r\n\t\treturn  iUbicacionRepository.findById(id).orElse(new UbicacionConstancias());\r\n\t}\r\n\t\r\n\tpublic Optional<UbicacionConstancias> findByIdOptional(Long id){\r\n\t\treturn  iUbicacionRepository.findById(id);\r\n\t}\r\n\r\n\r\n\tpublic void deleteUbicacionConstancias(UbicacionConstancias ubicacionConstancias) {\r\n\t\tiUbicacionRepository.delete(ubicacionConstancias);\r\n\t}\r\n\t\r\n\tpublic List<UbicacionConstancias> findAll(){\r\n\t\treturn iUbicacionRepository.findAll();\r\n\t}\r\n\t\r\n\t\r\n \r\n\tpublic UbicacionConstancias  saveUbicacionConstancias(UbicacionConstancias ubicacionConstancias) {\r\n\t\tif (ubicacionConstancias.getId() == null) {\r\n\t\t\tubicacionConstancias.setId(UltimoId());\r\n\t\t}\r\n\t\t\r\n\t\treturn iUbicacionRepository.save(ubicacionConstancias);\r\n\t}\r\n\r\n\tpublic String validarPath(String path, Object entidad) {\r\n\t\tOptional<UbicacionConstancias> ubConstanciasOptional;\r\n\t\tif (entidad instanceof Actividad) {\r\n\t\t\tActividad actividad = (Actividad) entidad;\r\n\t\t\tubConstanciasOptional = Optional.ofNullable(actividad.getUbicacionConstancias());\r\n\t\t\tif (ubConstanciasOptional.isEmpty()) {\r\n\t\t\t\tif (path == null || path.isEmpty()) {\r\n\t\t\t\t\tthrow new RuntimeException(\"Path nulo o vacio\");\r\n\t\t\t\t}\r\n\t\t\t\tpath = path.concat(\"\\\\\" + actividad.getNombreActividad().trim() + actividad.getFechaActividad().toString().trim());\r\n\t\t\t\tactividad.setIdUbicacionConstancias(saveUbicacionConstancias(\r\n\t\t\t\t\t\tUbicacionConstancias.builder()\r\n\t\t\t\t\t\t\t\t.ubicacion(path)\r\n\t\t\t\t\t\t\t\t.build()\r\n\t\t\t\t).getId());\r\n\t\t\t\tactividadService.saveActividad(actividad);\r\n\t\t\t} else {\r\n\t\t\t\tpath = ubConstanciasOptional.get().getUbicacion().trim();\r\n\t\t\t}\r\n\t\t} else if (entidad instanceof Modulo) {\r\n\t\t\tModulo modulo = (Modulo) entidad;\r\n\t\t\tubConstanciasOptional = Optional.ofNullable(modulo.getUbicacionConstancias());\r\n\t\t\tif (ubConstanciasOptional.isEmpty()) {\r\n\t\t\t\tif (path == null || path.isEmpty()) {\r\n\t\t\t\t\tthrow new RuntimeException(\"Path nulo o vacio\");\r\n\t\t\t\t}\r\n\t\t\t\tpath = path.concat(\"\\\\\" + modulo.getNombre().trim());\r\n\t\t\t\tmodulo.setIdUbicacionConstancias(saveUbicacionConstancias(\r\n\t\t\t\t\t\tUbicacionConstancias.builder()\r\n\t\t\t\t\t\t\t\t.ubicacion(path)\r\n\t\t\t\t\t\t\t\t.build()\r\n\t\t\t\t).getId());\r\n\t\t\t\tmoduloService.saveModulo(modulo);\r\n\t\t\t} else {\r\n\t\t\t\tpath = ubConstanciasOptional.get().getUbicacion().trim();\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new IllegalArgumentException(\"Entidad no v√°lida\");\r\n\t\t}\r\n\r\n\t\tSystem.out.println(\"Ruta : \" + path);\r\n\r\n\t\tFile carpeta = new File(path);\r\n\t\tif (!carpeta.exists()) {\r\n\t\t\tif (carpeta.mkdirs()) {\r\n\t\t\t\tSystem.out.println(\"Carpeta creada exitosamente.\");\r\n\t\t\t} else {\r\n\t\t\t\tSystem.out.println(\"Error al crear la carpeta.\");\r\n\t\t\t\tthrow new RuntimeException(\"Error al crear la carpeta.\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\t\r\n\t\r\n}\r\n"
        }
    ]
}